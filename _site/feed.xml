<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiamHsia's Blog</title>
    <description>A Simple Jekyll Blog Theme.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 Mar 2018 18:06:09 +0800</pubDate>
    <lastBuildDate>Wed, 28 Mar 2018 18:06:09 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>MySQL UNION用法</title>
        <description>&lt;p&gt;原文地址：&lt;a href=&quot;http://www.mysqltutorial.org/sql-union-mysql.aspx&quot;&gt;MySQL UNION&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在此教程中，你将会学到如何用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;操作符来合并两个甚至多个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;的查询结果至一个结果集中。&lt;/p&gt;

&lt;h2 id=&quot;用法&quot;&gt;用法&lt;/h2&gt;
&lt;p&gt;在MySQL数据库中，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;操作符允许你合并多个查询结果集，下面是&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;操作符的语法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT column_list
UNION [DISTINCT | ALL]
SELECT column_list
UNION [DISTINCT | ALL]
SELECT column_list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;想要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN&lt;/code&gt;合并多个查询结果集，下面是必须遵守的规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;查询的列的个数必须是相同的，比如：第一个查询有两列，第二个必须也是两列。&lt;/li&gt;
  &lt;li&gt;列的数据类型必须是相同的，或者是可以相互转换的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;运算符会删除重复的数据，因为缺省默认是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt;，但你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN ALL&lt;/code&gt;来解决这个问题。&lt;/p&gt;

&lt;p&gt;好了，让我们看看下面的例子，表：&lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
 
CREATE TABLE t1 (
    id INT PRIMARY KEY
);
 
CREATE TABLE t2 (
    id INT PRIMARY KEY
);
 
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (2),(3),(4);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;就会合并从&lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt;中取得的数据：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT id
FROM t1
UNION
SELECT id
FROM t2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但最终的结果是去重的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
+----+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN&lt;/code&gt;去掉了&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;，只会保留一个有效的值，诚如上面所说的，你可以加上&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION ALL&lt;/code&gt;来避免。&lt;/p&gt;

&lt;p&gt;可能下面的韦恩图能更好的解释整个操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION ALL&lt;/code&gt;，重复的数据便会保留下来，由于不处理重复数据，它的速度会比&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN DISTINCT&lt;/code&gt;快很多。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT id
FROM t1
UNION ALL
SELECT id
FROM t2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
|  2 |
|  3 |
|  4 |
+----+
6 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到了吧，在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN ALL&lt;/code&gt;语句之后，重复的数据又重新回来了。&lt;/p&gt;

&lt;h2 id=&quot;unioin-vs-join&quot;&gt;UNIOIN vs. JOIN&lt;/h2&gt;
&lt;p&gt;同样的联合两张表的数据，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;又有什么区别呢？简单的说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;是垂直合并，而&lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;是水平合并&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-vs-JOIN.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;列别名&quot;&gt;列别名&lt;/h2&gt;
&lt;p&gt;我们下面使用&lt;code class=&quot;highlighter-rouge&quot;&gt;customers&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;employees&lt;/code&gt;这两张表来做演示，表结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-employees_table.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-customers_table.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假如你想要查询出雇员和顾客的名字，并且合并姓和名到一个结果集中，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN&lt;/code&gt;此时便可以很好的解决。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    firstName, 
    lastName
FROM
    employees 
UNION 
SELECT 
    contactFirstName, 
    contactLastName
FROM
    customers;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正如你所见，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;会使用第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句的列名作为输出的名字，如果你想使用自己的别名，也很简单，在第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句中设置即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    concat(firstName,' ',lastName) fullname
FROM
    employees 
UNION SELECT 
    concat(contactFirstName,' ',contactLastName)
FROM
    customers;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新的结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-with-column-alias-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;对结果排序&quot;&gt;对结果排序&lt;/h2&gt;
&lt;p&gt;在最后一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句之后，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;便可以对整个得到的结果集进行排序。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    concat(firstName,' ',lastName) fullname
FROM
    employees 
UNION SELECT 
    concat(contactFirstName,' ',contactLastName)
FROM
    customers
ORDER BY fullname;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-and-ORDER-BY-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要我们注意的是，如果你在每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句之后都加上&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;并不会影响最后一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句之后的&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;，所以说，只有最后一个才是有效的。&lt;/p&gt;

&lt;p&gt;MySQL同样支持通过数据集所在位置排序的功能，如下使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    concat(firstName,' ',lastName) fullname
FROM
    employees 
UNION SELECT 
    concat(contactFirstName,' ',contactLastName)
FROM
    customers
ORDER BY 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过这个教程，你一定学会和如何用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;指令来合并多个查询语句的结果.&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;

</description>
        <pubDate>Wed, 28 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tutorial/MySQL-Union-Tutorial.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/MySQL-Union-Tutorial.html</guid>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>Xcode 安装 vim 插件</title>
        <description>&lt;h1 id=&quot;xcode-安装-vim-插件&quot;&gt;Xcode 安装 Vim 插件&lt;/h1&gt;
&lt;p&gt;Xcode 没有自带Vim模式，我们需要安装第三方插件，来实现此功能。该文章基本翻译自该插件的文档，插件的地址：https://github.com/XVimProject/XVim2&lt;/p&gt;

&lt;h2 id=&quot;系统要求&quot;&gt;系统要求&lt;/h2&gt;
&lt;p&gt;该插件满足Xcode 9 ，如果你使用的是9以下的版本，请访问&lt;a href=&quot;https://github.com/XVimProject/XVim&quot;&gt;GitHub - XVimProject/XVim: Xcode plugin for Vim keybindings&lt;/a&gt;，下面是我的系统配置的相关信息，仅供参考。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MacOS版本： 10.13.3 (17D102)&lt;/li&gt;
  &lt;li&gt;Xcode版本： 9.2 (9C40b)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;重新对xcode进行签名&quot;&gt;重新对Xcode进行签名&lt;/h2&gt;
&lt;p&gt;Xcode 8以上就已经不再支持第三方插件，我们需要重新对Xcode进行重新签名来实现。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;关闭Xcode&lt;/li&gt;
  &lt;li&gt;准备代码签名证书
    &lt;ul&gt;
      &lt;li&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;钥匙串&lt;/code&gt;选择&lt;code class=&quot;highlighter-rouge&quot;&gt;登录&lt;/code&gt;选项，在菜单栏选择&lt;code class=&quot;highlighter-rouge&quot;&gt;证书助手&lt;/code&gt;，创建证书
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-Keychain1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;在弹出的创建窗口中，输入&lt;code class=&quot;highlighter-rouge&quot;&gt;XcodeSigner&lt;/code&gt;，证书类型选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Code Signing&lt;/code&gt;，然后点击创建。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-Keychain2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;对Xcode进行重新签名
打开命令行，输入如下代码：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo codesign -f -s XcodeSigner /Applications/Xcode.app&lt;/code&gt;
等待重新签名完成，这可能需要很长一段时间，不要以为是程序卡住而关闭命令行程序。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;安装插件&quot;&gt;安装插件&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载插件的源码
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/XVimProject/XVim2.git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;确认 &lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select&lt;/code&gt;是指向Xcode
在命令行中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select -p&lt;/code&gt;，会返回&lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Xcode.app/Contents/Developer&lt;/code&gt;，如果没有显示该路径，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select -s&lt;/code&gt;命令进行设置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进入插件源码目录，进行编译。
在源码目录下，一条&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;命令即可，稍作等待，编译完成。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-build-succeeded.png&quot; alt=&quot;&quot; /&gt;
出现如下&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Succeeded&lt;/code&gt;的编译信息即表示已经编译成功，如果出现&lt;code class=&quot;highlighter-rouge&quot;&gt;XVim hasn't confirmed the compatibility with your Xcode, Version X.X
Do you want to compile XVim with support Xcode Version X.X at your own risk?&lt;/code&gt;的提示信息，请输入&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;来确认。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新打开Xcode，会提示是否加载&lt;code class=&quot;highlighter-rouge&quot;&gt;XVim&lt;/code&gt;插件，点击&lt;code class=&quot;highlighter-rouge&quot;&gt;是&lt;/code&gt;即可。如果，错误点击了&lt;code class=&quot;highlighter-rouge&quot;&gt;否&lt;/code&gt;则无法加载插件，此时需要卸载该插件，在终端中输入如下命令：
&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults delete  com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcode-X.X&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;X.X&lt;/code&gt;是你的Xcode版本号，在Xcode的菜单栏，点击&lt;code class=&quot;highlighter-rouge&quot;&gt;关于Xcode&lt;/code&gt;即可看到。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-xcode-version.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;卸载XVim
如果想要卸载该插件，进入该源码目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;make uninstall&lt;/code&gt;即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;捐助--其他&quot;&gt;捐助 &amp;amp; 其他&lt;/h2&gt;
&lt;p&gt;如果你觉得这个插件非常有用，可以为作者进行捐助，捐助地址是：&lt;a href=&quot;https://www.bountysource.com/teams/xvim&quot;&gt;Bountysource&lt;/a&gt;，想要了解更多相关信息，可以访问该项目Github主页，&lt;a href=&quot;https://github.com/XVimProject/XVim2&quot;&gt;XVim&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tutorial/Xcode-Use-Vim-Mode.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/Xcode-Use-Vim-Mode.html</guid>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>从美国建国史去谈民主的认知</title>
        <description>&lt;p&gt;读完了「美国史」的三卷中的第一卷的内容，从发现新大陆开始，一直讲到美国建国后政治，经济，文化的发展，可以说第一卷就是美国的建国史，说一说这部分内容，以及从这段曲折并波澜壮阔的历史中看到的民主的认知，权当读书的笔记。&lt;/p&gt;

&lt;p&gt;以前总调侃美国历史短，短到都没有中国同仁堂的历史长，同仁堂建立于清康熙八年（1669年），1776年，第二次大陆会议通过「独立宣言」，美国才算是真正的建国，从这种角度上来说美国的确是非常年轻的一个国家，当然，我们不能从印第安人时代就当做美国的历史，只能算作北美洲历史，就好像不能从历史的角度去区分北京人一样，你祖先是北京人，我祖先还是山顶人洞呢。&lt;/p&gt;

&lt;p&gt;美国为何在建国之初就能建立完善，自由，民主的政治制度？不可否认，这是站在英国政治制度的肩膀上，早在1216年的英国（中国宋朝）就通过了「自由大宪章」来限制君主权利，形成了完整的君主立宪制度，随之而来的1295年形成议会的雏形，到了1620年第一批清教徒登上五月花号驶向美洲大陆，民主早已深入人心，五月花号在充满凶险的茫茫大海，生死未卜的情况下，所有人却一致通过了「五月花号公约」，公约规定所有人组成「公民政体」，遵循少数服从多数的原则，从这点看来，建国即建立民主的制度就一点都不奇怪了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/kiuvL&quot; alt=&quot;五月花号公约起草&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随着不断移民从英国，法国等国家来到美洲大陆，在此安身立命，他们来自不同的国家，受到迫害到达美洲，便以这片崭新的土地为自己的国家。就像成年的孩子要脱离父母的家庭一样，美国这个茁壮成长的青年，也渴望脱离英国这个「家庭」束缚，英国殖民者和美洲大陆的人民矛盾越来越深，不断增加的赋税，暴力统治，最后在克莱星顿打响了反抗英国殖民者的第一枪，和中国抗日战争颇为相似的是，美洲人民面对全副武装的英军，和中国人民面对日军一样，正面冲突毫无胜算可能，只能采取防守之势，而英军和日军作为攻击方，只想快速赢下战争，不料战线越拖约长，深陷战争的泥淖中无法自拔，最终经济被拖垮，在1782年签订了「巴黎合约」，英军投降，美洲大陆正式从殖民者的统治下独立。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/b8JlW&quot; alt=&quot;华盛顿横渡特拉华河，战争走向尾声&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无论是政治革命还是残酷的战争，往往都会带来社会的巨大变革，独立之后的美国社会，平等的精神更加深入人心，这场战争是每个人冒着生命的危险而赢下的，理所应该所有人应当平等分享这个国家的胜利，一位老绅士在回忆中说道：「农民走进来，随地吐痰，随随便说地脱下满是泥巴的靴子，丝毫不顾在场其他人的感受，独立精神已经被转化为平等精神，每一位携带武器的人都认为自己与其邻居的社会地位相等，毫无疑问，每个人都觉得自己在所有方面与我平等了」。随之而来的1787年在费城召开的制宪会议，这种平等的精神便以法律条文的方式被写进宪法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/tlED4&quot; alt=&quot;费城制宪会议&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每一次变革都是非民主国家迈向民主共和的好机会，美国独立战争，法国大革命，日本明治维新，中国戊戌变法等等，没有迈出这一步，亦或是没有成功的，这个机会就错过了，只能去等着下一次的到来。「民主谁也挡不住，你要么开门让它进来；要么看着它破门而入。这只是一个时间问题」，这是历史的潮流，是没有办法去阻挡的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/8QGBC&quot; alt=&quot;戈尔巴乔夫宣布苏联解体&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对犬儒主义的人来说，民主这东西好像有和没有没什么区别嘛，不是照样可以看剧，过日子。对于此种说法，我是持强烈反对的意见的，在没有民主的国度里，所有的一切都好像是统治阶级的施舍，能够稳定过完一生的前提，是你不会遇到任何不公平的对待，如果不幸遇到，发声就很难很难了，因为你没法争取到普罗大众没有，而统治阶级独有的东西，这被现在流行语称之为阶级固化。&lt;/p&gt;

&lt;p&gt;对待民主应该和对待未知事物态度一样，首先一定要谦逊和求知，而不是先入为主的鄙夷，「你看，一民主就容易乱，我宁愿这样」，此种态度是切不可取的。我喜欢美国制宪会议起到推动作用的汉密尔顿，形容开国之父们的一句话作为本文结尾：&lt;/p&gt;

&lt;p&gt;「对于未知的什么我都野心勃勃，我承认这是我的弱点」&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E7%AC%94/The-History-of-America-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E7%AC%94/The-History-of-America-1.html</guid>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>2017年总结</title>
        <description>&lt;p&gt;在我上大学的时候，看过一段文字并且以此为信条，「你25岁之前可以随便的选择方向，而不用去担心你的未来，之后就需要慎之又慎」，转眼之间，就到了人生这个节点，人生可真是奇妙，2017年整个一年好像就是印证这句话而来的，17年年初，放弃了现有的工作，去「随便选择」看似很好的道路，但后来发现，从事你不爱的工作就像和你不爱的人在一起一样，貌合神离，身心俱疲。勉勉强强到了7月中旬，我决定摆脱这一切，只身前往上海工作，这后半年，和小伙伴一起工作，真的让我感到幸福和快乐。「重新认识自己」应该是我17年的关键字，走错了路并且修正自己，是我今年最大的收获。&lt;/p&gt;

&lt;p&gt;对于新的一年，我则没有太多希冀的，历史读了一点，总会有一种时间和命运的虚无感，个人的努力在命运中起多大作用呢？崇祯吊死在煤山，是不努力么？非亡国之君当亡国之运尔，时间就像一条大河，每个人就像河中的沙子，行至宽处，可能波涛汹涌，行至窄处，涓涓细流，个人的努力只能让自己在河中而不在岸上，至于是不是能汹涌澎湃，就很难很难说了，也许以后的每年，我都会写到「今年好像和去年没差多少嘛」，这也没有多少可以抱怨自己不够努力的，兴许是自己这一辈子都是涓涓细流，时间能够裹挟着我一路向前，细流也好，波涛也罢，我都十分满足了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/07NfK&quot; alt=&quot;Carpe Diem&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E7%AC%94/2017-Summery.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E7%AC%94/2017-Summery.html</guid>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>道</title>
        <description>&lt;p&gt;「史记·孔子世家」记录孔子这么一件故事，孔子推广自己的理念，却四处碰壁，他见弟子各个都面露愠色，便提出了一个问题「诗云：匪兕匪虎，率彼旷野，吾道非邪？ 吾何为于此？」，大意是，我们既不是犀牛也不是老虎，却在在这荒野疲于奔命，使我们选择的道路错了么？为什么会流落成这样的境地呢？问完子路后，又对子贡抛出了这个问题，子贡曰：「夫子之道至大也，故天下莫能容夫子。夫子盖少贬焉？」(夫子的理念实在是太宏大了，所以普天之下没有能容得下夫子的，夫子能不能放低点标准呢？)。孔子曰：「赐，良农能稼而不能为穑，良工能巧而不能为顺。君子能修其道，纲而纪之，统而理之，而不能为容。今尔不修尔道而求为容。赐，而志不远矣！」(赐啊，良农播种却不求好收成，良工能擅长工艺却求每个人都用得顺心，君子能够明白自己的道，用法度规范国家，用道统来治理臣民，但不能保证被虽有人所包容。如今你不修明你的道，却一味求被包容，赐，你的志向真的太小了)&lt;/p&gt;

&lt;p&gt;「道」这个词真的很难解释，包容的东西真的是太多了，可以是你的理想，也可以是你的操守，总之是安身立命的，不容改变的东西，诚如孔子批评子贡所说的，你不能去坚守自己的安身立命之道，却放低标准让别人去包容你，这样的志向可真是太小了啊。这话放在几千年后的今天也是非常受用的，就像我们在职场，生活中，不被包容是非常正常的事情，在办公室有办公室政治，在科室有勾心斗角之类，我们应该羡慕那些圆滑，精于世故的人却毫无能力的人么？当然不是，其志不远矣。坚守自己的道，作为工程师，就去磨炼自己的技能，写出稳健的代码，作为医生，就增长自己的能力，做好每次手术，这才是我们应该追求的。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E7%AC%94/%E9%81%93.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E7%AC%94/%E9%81%93.html</guid>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>更好的PHP开发环境-Docker篇</title>
        <description>&lt;p&gt;如果你看了Vagrant篇的内容，可能会想「我也不像做第一个装开发环境的人，把别人的镜像拿过来用就好了」，恭喜你，偷懒使人成长，你已经有成为开发大师的思路了，但是只不过有人稍早实现了你的idea，而且稍作改进成了现在的Docker，所以呐，有想法就去实现吧，不然就让别人占了先机咯（:&lt;/p&gt;

&lt;p&gt;如果说Vagrant是将整个操作系统虚拟化，然后打包成镜像，分发使用，那么我们就可以把Docker简单理解为粒度更细的Vagrant，Docker可以将例如PHP，Nginx，MySQL这类服务打包成镜像，然后我们可以像拼积木一样组合他们，来实现我们想要的架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/wiC0h&quot; alt=&quot;架构图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装docker&quot;&gt;安装Docker&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.docker.com/&quot;&gt;官方网站&lt;/a&gt;直接下载符合你操作系统的版本，安装即可。由于国内的网络下载Docker镜像实在是太慢，我们不妨使用国内的加速服务，教程可以参见：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;/h2&gt;
&lt;p&gt;如果你还没有来得及看Docker的文档，当然也没关系，我们通过第一个服务，Nginx的搭建来边做边学。&lt;/p&gt;

&lt;p&gt;首先，我们先拉取一个Nginx镜像，很简单：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker pull nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt;查看一下我们刚刚拉取下来的镜像：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/VCBia&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实例化&lt;/strong&gt;该镜像，我们把&lt;strong&gt;实例化&lt;/strong&gt;的镜像称之为容器，镜像和容器的关系就好比类和实例的关系。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Nginx容器启动之后，访问localhost，熟悉的欢迎页面出现了吧，不用我们下载，编译，安装，直接实例化然后启动就好了，多么让人幸福的一件事。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/wmvzy&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;切回命终端，发现终端打印出了一堆log信息，我可不想整天盯着这些无趣的信息看，让Nginx进入守护运行吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 --name cool_nginx -d nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;是端口参数，给上&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数表示容器是守护程序会进入后台运行，&lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt;则是重新给容器命名。成功之后，用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;来查看当前已经启动的容器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/hsEm0&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在我们进入这个容器，并修改这个Nginx默认网页。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it cool_nginx bash
&amp;gt; echo '&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;' &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;挂载一个本地目录到容器，就不用每次都进入到容器中修改代码了，当然的将&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/bruce/Documents/Workspace/Docker/src/&lt;/code&gt;替换成你自己的文件目录。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 \
--name cool_nginx -d \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;php&quot;&gt;PHP&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker pull php:7.0-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用7.0版本的PHP，你可以选择其他版本的PHP。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -d \
--name cool_php_fpm \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
php:7.0-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;可以看到，Nginx和FPM都已经启动了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/3Z1Kc&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么PHP如何和Nginx链接起来呢？很简单，Docker为我们做好了一切，只需要一个参数就可以将两个容器链接起来。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--link cool_php_fpm 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们都知道，Nginx默认是不解析PHP文件的，所以还需要修改一下配置，不需要进入Nginx容器里去修改，我们在当前文件夹下，新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nginx.conf&lt;/code&gt;文件，写入如下内容：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    access_log off;
    error_log  /var/log/nginx/error.log error;

    sendfile off;

    client_max_body_size 100m;

    location ~ \.php?$ {
        fastcgi_pass cool_php_fpm:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /usr/share/nginx/html$fastcgi_script_name;
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
    }

    location ~ /\.ht {
        deny all;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm cool_nginx&lt;/code&gt;命令删除掉原先的Nginx容器，挂载该配置文件重新实例化：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 \
--name cool_nginx -d \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
-v /Users/bruce/Documents/Workspace/Docker/default_nginx.conf:/etc/nginx/conf.d/default.conf:ro \
--link cool_php_fpm \
nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在本地&lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt;目录下，新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;test.php&lt;/code&gt;文件，写入熟悉的内容：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
echo phpinfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Boom!!! PHP和Nginx就搭建好了，足够简单吧。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/k2XcB&quot; alt=&quot;phpinfo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;MySQL&lt;/h2&gt;
&lt;p&gt;和之前的安装一样，先拉取MySQL镜像：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker pull mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后启动：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -d \
--name cool_mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;参数是给给定环境变量，这里我们设定MySQL的密码是&lt;code class=&quot;highlighter-rouge&quot;&gt;123456&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;链接到MySQL容器：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it cool_mysql bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;登陆MySQL:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; mysql -uroot -p123456
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/d3Duk&quot; alt=&quot;MySQL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PHP如何链接到MySQL，相信你也知道了，对的还是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--link&lt;/code&gt;参数，我们删除掉&lt;code class=&quot;highlighter-rouge&quot;&gt;cool_php_fpm&lt;/code&gt;容器，重新构建&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -d \
--name cool_php_fpm \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
--link cool_mysql \
php:7.0-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;链接之后，PHP容器和MySQL容器能够通信了，但是还是不够呢(坚持一下，最后一步了)，初始PHP是没有安装MySQL扩展的，安装扩张也极其容易，先进入到PHP容器：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it cool_php bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-php-ext-install&lt;/code&gt;命令安装：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-php-ext-install mysqli
&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ok，我们重启PHP容器:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker restart cool_php_fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;来测试一下，新建一个测试脚本：&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cool_mysql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;123456&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create connection
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysqli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Check connection
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection failed: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Connected successfully&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/qsMdH&quot; alt=&quot;test mysql success&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;docker-compose&lt;/h2&gt;
&lt;p&gt;每次都用Dokcer命令实在是太过麻烦，引用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;这个工具更方便构建容器，配置容器等工作。&lt;/p&gt;

&lt;p&gt;好的，我们重新开始，使用下面两条命令让你忘掉一切：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker stop $(docker ps -a -q)
&amp;gt; docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们新建一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;的目录，用来存放&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;容器相关的配置文件，把前面我们使用的Nginx配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nginx.conf&lt;/code&gt;移动到这里，并新建名为&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfille&lt;/code&gt;的文件，写入如下内容：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM nginx

COPY ./default_nginx.conf /etc/nginx/conf.d/default.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在&lt;strong&gt;此文件夹&lt;/strong&gt;外新建&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;的文件，并写入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cool_nginx:
  build: ./nginx
  ports:
    - &quot;80:80&quot;
  volumes:
    # source
    - ./src/:/usr/share/nginx/htm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;想要重新构建Nginx容器就变得很简单：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;启动Nginx容器也非常容易：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或者干脆两者结合起来：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose up -d --build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;将配置写入文件，不仅不容易出错，而且更加容易分发，谁也不想在终端上输入那么一长串的命令。&lt;/p&gt;

&lt;p&gt;至于MySQL和PHP容器的构建，就不详细说明了，他们的构建都是一样的，全部的代码你可以在如下地址查阅：&lt;a href=&quot;https://github.com/blue7wings/lnmp_in_docker&quot;&gt;https://github.com/blue7wings/lnmp_in_docker&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;后续&quot;&gt;后续&lt;/h2&gt;
&lt;p&gt;毕竟此教程是一个新手向的教程，不准确表达在所难免，如果对某些问题还是比较疑惑，可以留言询问，除此之外，我最为推荐的还是先去查阅官方文档，或者是去stackoverflow上去看一看。以下两个资源非常适合新手入门，希望所有朋友都能以此为入门，掌握这门优秀的技术。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;Docker — 从入门到实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 03 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Docker.html</guid>
        
        <category>PHP</category>
        
        <category>开发环境</category>
        
        
        <category>PHP Tutorial</category>
        
      </item>
    
      <item>
        <title>更好的PHP开发环境-Vagrant篇</title>
        <description>&lt;p&gt;还记得，我们第一次学PHP是干嘛么？我想大部人都是从安装PHP运行环境开始的吧。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;学习PHP第一步，就要先理解PHP的运行环境 – 韩老师&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后就开始哼哧哼哧地开始在Windows上安装环境，先PHP，然后Apache，再装MySQL，从安装到最后调试通，足足花了一周。&lt;/p&gt;

&lt;p&gt;后来，我们也明白，Apache是干嘛的，流量是怎么交给PHP处理的，就别这么费劲一步一步装了，来一套集成的安装环境，&lt;a href=&quot;http://www.wampserver.com/en/&quot;&gt;WampServer&lt;/a&gt; 成了最好的选择。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/UE7k3&quot; alt=&quot;Wampserver 官网截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好学而且有好奇心的我们，成长的总是那么快，很快我们便知道有一种操作系统比Windows更适合开发，有一种服务器比Apache更优秀，便开始在Linux上安装LNMP架构的环境，大学实验室里那几台电脑，被我们装了又装，Linux发行版也换了好几茬，然后就毕业了，第一天上班就是要装开发环境，你得用QQ和PHPStorm，不能在那么优秀的操作系统上开发了，无奈换回了WampServer，冷气吹得你发冷和难受，你开始怀念那段大学不受拘束的时光，和实验室那几台LNMP架构的开发环境。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/K7nJ6&quot; alt=&quot;Vagrant&quot; /&gt;&lt;/p&gt;

&lt;p&gt;时光一去不复返，但我们即可以使用QQ和PHPStorm，同时也能使用我们心爱的LNMP环境开发了，就是我们今天的主角：&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;vagrant-是什么--可以做什么&quot;&gt;Vagrant 是什么 &amp;amp; 可以做什么&lt;/h2&gt;
&lt;p&gt;Vagrant是一套对虚拟系统进行配置，管理，分发的一套系统，依赖虚拟机环境，比如Virtualbox和VMWare。&lt;/p&gt;

&lt;p&gt;这和直接使用Virtualbox等虚拟机软件有什么不同呢？本质上是没有什么不同的，Vagrant只是一套工具，我们可以更加方便配置，和使用这个虚拟机，想想一条命令就能保存现运行的虚拟环境，远比你去拷贝虚拟机文件简单地多吧。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;下载页面&lt;/a&gt;，选择你的操作系统对应的版本，然后安装。&lt;/p&gt;

&lt;p&gt;安装完毕，尝试在终端中输入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant --version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;此外还需要安装Virtualbox或者VMWare，Virtualbox开源且免费，默认我选择此虚拟机，可以在 &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt; 选择合适的版本。&lt;/p&gt;
&lt;h2 id=&quot;选择合适的镜像&quot;&gt;选择合适的镜像&lt;/h2&gt;
&lt;p&gt;我们把镜像称之为box，添加一个镜像也很简单。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant box add centos/7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;很简单就添加了centos7的开发镜像，当然你还可以选择其他的镜像，在 &lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt; 选择适合你的。&lt;/p&gt;

&lt;p&gt;由于国内网络的原因，直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;命名，下载镜像的速度实在太慢(Fuck GFW)，我们不妨事先下载好镜像，然后再&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;进去，我们在 &lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt;选择和下载镜像。&lt;/p&gt;

&lt;p&gt;我们下载好镜像，放在目录下，执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant box add [名称] [镜像地址]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/udvKh&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们再运行&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant box list&lt;/code&gt;命令，便能看到一个名为server的镜像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/n5J5G&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;启动开发环境&quot;&gt;启动开发环境&lt;/h2&gt;
&lt;p&gt;首先要初始化此开发环境，在任意文件夹下执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant init [镜像名称]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/llgLq&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;初始化完成之后，会在当前文件夹下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;的配置文件，至于有哪些配置项，先放在一边，先启动我们的开发镜像，在&lt;strong&gt;此文件夹&lt;/strong&gt;下执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/6BHhy&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功启动，如果你打开Virtualbox，还可以发现vagrant镜像正在运行。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/39erQ&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过SSH来连接开发环境，如果你是Mac或Linux用户，可以直接用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt;来连接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/fp2La&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于Windows原生不支持SSH，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh-config&lt;/code&gt;来取得SSH配置，用第三方的SSH软件来连接。&lt;/p&gt;

&lt;p&gt;连接上我们的开发环境，执行命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; uname -a 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/ApRkM&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wow，熟悉的Linux系统又回来了，我啰啰嗦嗦写了这么多，其实简单几步就创建好了一个开发环境，你现在便可以在本地用着QQ，而在开发环境装LNMP，进行开发工作了。&lt;/p&gt;

&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
&lt;p&gt;只是搭建好了开发环境，还是不够，还需要有共享文件夹，把本地网络和开发环境网络调通，以便我们后续的开发和调试。&lt;/p&gt;

&lt;h3 id=&quot;共享文件夹配置&quot;&gt;共享文件夹配置&lt;/h3&gt;
&lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;，在42至46行告诉我们，共享文件夹是在这里配置，第一个配置参数是本地目录，第二个参数是开发环境要同步的目录。在本地新建&lt;code class=&quot;highlighter-rouge&quot;&gt;code/&lt;/code&gt;文件夹，并且在开发环境新建文件夹&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/code&lt;/code&gt;，想要本地和开发环境共享文件，便可以这么写：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config.vm.synced_folder &quot;./code&quot;, &quot;/home/code&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;取消该行代码的注释，保存，&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant reload&lt;/code&gt; 命令重新启动虚拟机。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/BC4Dn&quot; alt=&quot;文件挂载成功&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挂载共享文件夹成功，在本地code文件夹新建一个文件试试吧，开发环境的code文件夹下也一定有该文件了，awesome！&lt;/p&gt;

&lt;h3 id=&quot;网络配置&quot;&gt;网络配置&lt;/h3&gt;
&lt;p&gt;本地和开发开发环境网络连接共有三种方式&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;端口转发：将指定端口的网络转接到开发环境&lt;/li&gt;
  &lt;li&gt;公开网络：将所有网络转接到开发环境，是一种桥接&lt;/li&gt;
  &lt;li&gt;私有网络：将指定IP的网络转接到开发环境&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我比较偏向于第三种私有网络的方式，修改配置文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;保存，&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant reload&lt;/code&gt;命令重启虚拟机。如果你已经装完Nginx，直接访问&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.33.10&lt;/code&gt;即可看到成功页面了。出现拒绝访问的话，关闭开发环境的防火墙即可。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl disable firewalld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/TRWMT&quot; alt=&quot;Nginx成功页面&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;备份和分发&quot;&gt;备份和分发&lt;/h2&gt;
&lt;p&gt;你安装完LNMP环境，甚至还装了Redis和Python，作为开发环境用得很是顺畅，旁边的小张也受够了WampServer这种不专业的东西，但他懒到都不愿意花半个小时读一下这篇文章，仅仅想要你的开发环境。&lt;/p&gt;

&lt;p&gt;大可不用去拷贝虚拟机文件，Vagrant为我们准备好了备份的工具。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;vagrant会将我们现在运行的开发环境打包成一个新的box，此镜像包含我们已经安装的所有的东西，再把Vagrantfile拷贝过去，两条命令就可以重现当前的开发环境，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant box add server package.box
&amp;gt; vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;BOOM！你的开发环境完整的就移植过去了。此方法也可以用作你开发系统的备份，想要一份祖传的开发环境？打包一份传到网盘，随时随地任何机器都可以使用。&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Vagrant.html</link>
        <guid isPermaLink="true">http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Vagrant.html</guid>
        
        <category>PHP</category>
        
        <category>开发环境</category>
        
        
        <category>PHP Tutorial</category>
        
      </item>
    
      <item>
        <title>Python对象：可变和不可变对象类型</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;并不是所有的Python对象处理方式都是一样的，有的对象是可变的(mutable)，此类对象可以被改变，其余的对象则是不可变的(immutable)，它们无法被修改，并且当我们尝试更新此类对象的时候，会返回一个新的对象。知道这些对我们写Python代码有什么意义呢？我们来一探究竟。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;不可变immutable对象类型&quot;&gt;不可变(immutable)对象类型&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;int&lt;/li&gt;
  &lt;li&gt;float&lt;/li&gt;
  &lt;li&gt;decimal&lt;/li&gt;
  &lt;li&gt;complex&lt;/li&gt;
  &lt;li&gt;bool&lt;/li&gt;
  &lt;li&gt;string&lt;/li&gt;
  &lt;li&gt;tuple&lt;/li&gt;
  &lt;li&gt;range&lt;/li&gt;
  &lt;li&gt;frozenset&lt;/li&gt;
  &lt;li&gt;bytes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;可变mutable对象类型&quot;&gt;可变(mutable)对象类型&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;list&lt;/li&gt;
  &lt;li&gt;dict&lt;/li&gt;
  &lt;li&gt;set&lt;/li&gt;
  &lt;li&gt;bytearray&lt;/li&gt;
  &lt;li&gt;user-defined classes (unless specifically made immutable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;怎么记忆这些可变或者不可变的对象类型呢？很简单，容器（containers）和自定义（user-defined）类型都是可变的，最典型的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;，列表类型相当于一个容器，数据可以放进去，可以取出来，所以是可变对象类型。标量类型（scalar type）的对象基本上都是不可变，比如，&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;。但是，有一个例外，&lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt;是一种不可变对象类型，其实也很好理解，元组声明完成之后，就无法再进行修改，自然是不可变对象类型。&lt;/p&gt;

&lt;h2 id=&quot;不可变和可变对象带来的小思考&quot;&gt;不可变和可变对象带来的小思考&lt;/h2&gt;
&lt;p&gt;理解不可变对象和可变对象看似是无关痛痒的知识点，如果我们能够灵活运用，能有效提高我们代码运行的效率，我们看下面合并字符串的例子：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;string_build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string_build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;实际上，这段代码效率是非常低下的，字符串是不可变对象类型，当合并两个字符串的时候，会创建第三个字符串，迭代次数过多或者数据量很大的字符串合并，就会在创建第三个字符串的时候浪费掉很多的内存空间，不仅如此，在迭代最后一次，为最后的结果还会开辟更大的空间来存储，实在是太浪费。&lt;/p&gt;

&lt;p&gt;下面是更加有效和哲学（pythonic）的方式：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;builder_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;### 另一种使用list实现的方法&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;### 或者使用map函数&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;上面的代码，就充分利用了可变对象特点，当数据要更新的时候，不开辟新的空间，而是在原先的空间上增加，大大减少了空间的使用，提高了代码执行的效率。&lt;/p&gt;

&lt;p&gt;我们再看一个可变类型对象的坑。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;thing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# returns [&quot;thing&quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# returns [&quot;thing&quot;, &quot;thing&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对于刚接触python的人来说，看到这个结果可能是一脸懵逼，what？为什么两次函数调用使用的是一个默认参数？这是因为，默认参数在函数声明的时候就已经被定义，此时变量&lt;code class=&quot;highlighter-rouge&quot;&gt;param&lt;/code&gt;指向&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;，在以后的调用，这种指向关系都不会改变，直到被重新赋值，python的这种值传递方式，叫对象引用传递，如果听起来有点模糊，可以读一读我上一篇文章，&lt;a href=&quot;http://www.blue7wings.com/python/Pythons-pass-by-object-reference.html&quot;&gt;Python变量赋值方式&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;所以说，我们尽量不要使用可变类型对象作为函数的参数，如果想要使用，应当给予判断：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;thing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codehabitude.com/2013/12/24/python-objects-mutable-vs-immutable/&quot;&gt;PYTHON OBJECTS: MUTABLE VS. IMMUTABLE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blue7wings.com/python/Pythons-pass-by-object-reference.html&quot;&gt;Python变量赋值方式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 19 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/python/Python-objects-mutable-vs-immutable.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/Python-objects-mutable-vs-immutable.html</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>微信小程序开发教程[Part 3]</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;微信小程序对大部分人是没有价值的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到副标题，是不是有点难受呢，可能花了一天时间来看这个教程，却对你说微信小程序没有什么价值，如果你还有点耐心，把接下来的开发中的Trick看完，如果真的想放弃，那就拉到文章最后吧。:)&lt;/p&gt;

&lt;h2 id=&quot;布局&quot;&gt;布局&lt;/h2&gt;
&lt;p&gt;如果你仔细看我的WXSS代码，你就会发现，微信小程序布局和现在网页中盒子布局是不一样的，这里使用了Flex布局方式，Flex布局在2009年就已经推出，由于浏览器兼容的问题，并没有那么普及，但是你可以在微信小程序中放心使用，因为微信小程序解析引擎倒是统一的，这里推荐阮一峰老师的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot;&gt;Flex 布局教程&lt;/a&gt;。随着浏览器的统一，我相信Flex布局会和当年的Box布局一样流行的，可以趁着这个机会学习一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/A1f8Z&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了Flex布局之外，微信小程序还引进了尺寸单位，让我们可以适配不同分辨率的设备，所以开发的过程中一定要使用rpx作为单位，能够避免不少麻烦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/8DjH6&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;动画组件&quot;&gt;动画组件&lt;/h2&gt;
&lt;p&gt;你稍微细心一点的话，我登陆页中Emoji旋转的效果并不是使用官方的动画组件来完成的，而是使用一个&lt;strong&gt;第三方CSS动画库&lt;/strong&gt;，所以CSS的动画效果可以用在微信小程序中，官方的动画组件真的是太难用了，权当Trick方法吧。&lt;/p&gt;

&lt;h2 id=&quot;设计&quot;&gt;设计&lt;/h2&gt;
&lt;p&gt;我觉得这个小程序还是能看得过去的，作为一个审美匮乏的人，能够作出这样的设计，并且把设计实现，主要得力于Sketch这款软件，足够简单和好用，打开&lt;code class=&quot;highlighter-rouge&quot;&gt;asset/images&lt;/code&gt;文件夹，你可以发现全都是矢量图形，都是用Sketch设计完之后，直接导出成&lt;code class=&quot;highlighter-rouge&quot;&gt;svg&lt;/code&gt;文件，便直接可以在WXML中使用，足够简单和方便。&lt;/p&gt;

&lt;h2 id=&quot;鄙人拙见&quot;&gt;鄙人拙见&lt;/h2&gt;
&lt;p&gt;为什么我会说&lt;strong&gt;微信小程序对大部分人是没有价值的&lt;/strong&gt;，因为这是应用场景所决定的，就拿我所写的日记类小程序说，没有人会想写日记的时候还去开一下微信，恐怕开了微信就想着聊天去了，有的人可能说了，为什么不将这个小程序添加成桌面快捷方式呢？且不说IOS设备不支持此功能，这么做和一个普通APP又有何区别呢？Weex和Ionic等一系列优秀的框架，都是跨平台成熟的解决方案，如此一比微信小程序恐怕没有任何优势吧？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/rtEtn&quot; alt=&quot;ionic框架&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们要弄清微信小程序的理念是什么？就是微信小程序发布时所说的「即走即用」，举一个栗子，当我们使用摩拜单车时，用微信直接扫描二维码，弹出摩拜单车微信小程序，开始使用，用完直接关闭，没有推送，没有其他入口，这才是「即走即用」理念体现的地方。&lt;/p&gt;

&lt;p&gt;没有直接的入口，大部分的小程序我觉得都是没有意义的，这直接的入口包括，二维码扫描，微信公众平台转接，硬件接入，仅仅靠Appstore式的统一入口，恐怕大部分的微信小程序都是要死的。&lt;/p&gt;

&lt;p&gt;让我还有一点忧虑的是，我是不希望一个公司垄断所有的东西的，有苹果的IOS，还有谷歌的Android，这个世界不才有意思嘛？如果，看电视在腾讯，聊天在腾讯，各种APP也在腾讯，这可太无趣了，这也是我个人的一点私心吧。&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tutorial/Wechat_MiniApp-Tutorial-Part3.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/Wechat_MiniApp-Tutorial-Part3.html</guid>
        
        <category>微信小程序</category>
        
        <category>前端开发</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>微信小程序开发教程[Part 2]</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;前端程序员是最为「贪婪」的，他们不满足前端开发，便弄出了Nodejs，不满足后端开发，便开始「染指」移动端。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们把微信小程序类比成「自带后端逻辑」的网页栈是比较合适的，视图层是前端表现部分，逻辑层则包括网页的两个部分，网页显示逻辑和服务器交互逻辑，如果你懂一点MVC的话，逻辑层是包含Controller和Model两个部分，逻辑层一方面控制页面的渲染(C)，一方面将数据处理(M)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/Sr38p&quot; alt=&quot;逻辑&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;文件结构&quot;&gt;文件结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/NehEN&quot; alt=&quot;文件结构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开我们的项目，微信小程序的结构和我们网页开发很是相像，&lt;code class=&quot;highlighter-rouge&quot;&gt;asset&lt;/code&gt;文件夹用来放资源文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;pages&lt;/code&gt;用来放置页面文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;utils&lt;/code&gt;用来放一些工具文件。&lt;/p&gt;

&lt;p&gt;除此之外，在根目录下还有有三个配置文件，功能如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/nhIuw&quot; alt=&quot;配置文件&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;appjs&quot;&gt;app.js&lt;/h3&gt;
&lt;p&gt;当小程序启动时，我们想注册哪些参数，进行哪些操作，我们在此文件中完成。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/utils/util.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;openid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;avatar_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;emojis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get_emojis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;因为Emoji表情我想在启动之时便注册到全局，以便后续页面使用，如何使用这个全局变量，我们后续再做说明。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;emojis&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get_emojis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;appjson&quot;&gt;app.json&lt;/h3&gt;

&lt;p&gt;json文件不用想，那肯定是全局配置文件了，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;pages&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;pages/landing_page/index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;pages/home/index&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;backgroundTextStyle&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;navigationBarBackgroundColor&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;navigationBarTitleText&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Emojiary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;navigationBarTextStyle&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;black&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;用不到那么多配置，现在只用到&lt;code class=&quot;highlighter-rouge&quot;&gt;pages&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;两个配置项，&lt;code class=&quot;highlighter-rouge&quot;&gt;pages&lt;/code&gt;用来表示整个小程序由多少个页面组成，默认第一条为启动页面，&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;用于设置小程序的状态栏、导航条、标题、窗口背景色，具体设置项的意义就不一一赘述了。&lt;/p&gt;

&lt;h3 id=&quot;appswxss&quot;&gt;apps.wxss&lt;/h3&gt;

&lt;p&gt;全局的样式，一些全局共用的样式可以写在这里。&lt;/p&gt;

&lt;h2 id=&quot;页面&quot;&gt;页面&lt;/h2&gt;
&lt;p&gt;我们打开&lt;code class=&quot;highlighter-rouge&quot;&gt;pages&lt;/code&gt;文件夹，可以发现，两个页面就是对应的我们两个目录，以启动页&lt;code class=&quot;highlighter-rouge&quot;&gt;landing_page&lt;/code&gt;为例，来剖析整个代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/0F0VF&quot; alt=&quot;目录结构&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;indexwxml--indexwxss&quot;&gt;index.wxml &amp;amp; index.wxss&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;WXSS(WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过官方描述我们可以知道，WXML和WXSS其实就是HTML和CSS的变种，WXML集成了组件和一些事件处理，而WXSS保持CSS大部分特性的同时，增加了样式导入，和尺寸单位以此来保证不同分辨率设备能够得到统一的显示效果。&lt;/p&gt;

&lt;p&gt;和前端开发一样，我偏向于先用WXML和WXSS实现页面，至于逻辑处理则放到最后再实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/Dopi0&quot; alt=&quot;登陆页&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;indexjs&quot;&gt;index.js&lt;/h3&gt;
&lt;p&gt;当我们实现完页面，就该考虑一下，需要什么的逻辑功能呢？我这个登陆页逻辑很简单：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Emoji图片是随机的，加载时有动效&lt;/li&gt;
  &lt;li&gt;拿到微信用户的授权信息&lt;/li&gt;
  &lt;li&gt;跳转到主页面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在WXML中，标签我们称之为组件，&lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;为最基本的组件：视图容器，你可以理解为，所有可视元素的载体，还有很多其他组件，比如我们要用到的展示Emoji图片的&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;组件。&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;view&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userinfo-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userinfo-avatar ripple rotateIn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;background-size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cover&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/image&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/view&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;因为Emoji图片的地址是随机的，所以这个地址需要逻辑层处理完给我们，就用到了双向数据绑定，如果你看了&lt;code class=&quot;highlighter-rouge&quot;&gt;Vuejs&lt;/code&gt;一定对此不会陌生。&lt;/p&gt;

&lt;p&gt;好的，去&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;编写我们的这个逻辑。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;还记得我们在初始化&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;中注册的全局实例么？我们可以用上面的方法来取得这个全局实例。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;emoji_url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/asset/emojis/slightly-smiling-face.svg'&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;双向数据绑定，视图层中&lt;code class=&quot;highlighter-rouge&quot;&gt;emoji_url&lt;/code&gt;和这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;emoji_url&lt;/code&gt;是互相绑定的，视图层变量数据发生变化，同时逻辑层的变量值也会随之改变，反之亦然。这里，我给了Emoji图片一个默认的值，会在接下来的页面加载时进行改变。&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emojis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emojis&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;positive_emojis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emojis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'positive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emoji_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;positive_emojis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;positive_emojis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;emoji_url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/asset/emojis/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emoji_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.svg'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emoji_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;第1行代码就是拿到全局实例中的&lt;code class=&quot;highlighter-rouge&quot;&gt;emojis&lt;/code&gt;变量，第2，3行取得一个随机的表情名。第4行，我们借助&lt;code class=&quot;highlighter-rouge&quot;&gt;this.setData()&lt;/code&gt;这个函数，来改变&lt;code class=&quot;highlighter-rouge&quot;&gt;emoji_url&lt;/code&gt;的值，log一下该变量的值，没问题。&lt;/p&gt;

&lt;p&gt;接下来的代码就是实现我们第二个逻辑：拿到用户的授权信息，这部分代码就不细讲了，如果你不知道此部分的内容，可以参考&lt;a href=&quot;https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;amp;t=resource/res_list&amp;amp;verify=1&amp;amp;id=open1419316518&amp;amp;token=&amp;amp;lang=zh_CN&quot;&gt;微信公众平台相关文档&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 一秒后跳转到主页面&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jump'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;wx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;redirectTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/pages/home/index'&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;获取到用户的授权信息后，跳转到主页面，大功告成，我们的小程序启动页就搞定了，很简单吧。&lt;/p&gt;

&lt;p&gt;后面主页面代码，就不再做过多解释，毕竟该教程还只是一个偏向新手的初级教程，仔细阅读我主页面的代码(并不复杂)，和多看官方文档，很容易就上手了。&lt;/p&gt;

&lt;p&gt;在下一部分，我会说一说微信小程序开发应该注意什么，哪些Trick，还有我对小程序的看法。&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tutorial/Wechat-MiniApp-Tutorial-Part2.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/Wechat-MiniApp-Tutorial-Part2.html</guid>
        
        <category>微信小程序</category>
        
        <category>前端开发</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
  </channel>
</rss>
