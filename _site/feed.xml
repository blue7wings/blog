<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiamHsia's Blog</title>
    <description>A Simple Jekyll Blog Theme.</description>
    <link>http://www.blue7wings.com/</link>
    <atom:link href="http://www.blue7wings.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Aug 2018 22:30:51 +0800</pubDate>
    <lastBuildDate>Thu, 16 Aug 2018 22:30:51 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>从头开始搭建Web框架（三）- 事件分发</title>
        <description>&lt;p&gt;在上一篇文章中，介绍了MVC框架部分的最后一个部分：控制器，在这篇文章中，因为不讨论Model层的实现，所以介绍一下事件分发。&lt;/p&gt;

&lt;p&gt;事件的分发，好比给软件系统预留的插孔，当我们需要增加部分逻辑时，则不需要修改整个整体部分，而是通过这个预留的插孔，插入对应的逻辑来实现，可以大大降低了代码的耦合性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Screen-Shot-2013-10-11-at-11.50.55-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-dispatcher&quot;&gt;event-dispatcher&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; composer require symfony/event-dispatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;事件分发器，相当于整个流程中的一个调度员，通过监听注册的事件，然后触发对应的逻辑，中间件是一个比较好的例子，监听HTTP的请求，以处理对应的逻辑，比如：用户的验证，Log服务，响应数据的同一格式化处理等等。&lt;/p&gt;

&lt;p&gt;下面的简易的例子，是判断用户IP，如果是&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;就显示被屏蔽的提示信息，这个逻辑放在控制器也是非常容易实现的，考虑到以后的扩展性，我们就正好使用事件分发的相关知识来实现这个功能。&lt;/p&gt;

&lt;p&gt;在使用之前，新建两个目录&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Listeners&lt;/code&gt;，分别对应触发事件和监听器，不要忘了在&lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;中添加对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;autoload&lt;/code&gt;配置项。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;autoload&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;psr-4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Controller\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Controller/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Listeners\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Listeners/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Events\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Events/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在开始新建我们的第一个事件，请求事件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;中新建&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestEvent.php&lt;/code&gt;内容如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-214336.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码内容很简单，构造函数包含两个参数&lt;code class=&quot;highlighter-rouge&quot;&gt;Request&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt;，然后包含两个&lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;方法。&lt;/p&gt;

&lt;p&gt;接着创建监听器，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Listeners&lt;/code&gt;中新建&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthListener.php&lt;/code&gt;文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-214758.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里就是包含着我们的业务逻辑代码，写在&lt;code class=&quot;highlighter-rouge&quot;&gt;handle()&lt;/code&gt;函数之中。&lt;/p&gt;

&lt;p&gt;有了触发事件和监听器，接下来我们便可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;的入口文件中，进行事件的分发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-215313.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

 &lt;span class=&quot;nv&quot;&gt;$dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\Events\RequestEvent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$requestEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$listeners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;\Listeners\AuthListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$requestEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$requestEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$listeners&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;call_user_func_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'handle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此段代码很容易理解，表示增加一个监听&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;事件的监听器，如果接收到，则通过回调函数将&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestEvent&lt;/code&gt;递交过来处理，为了保持可扩展性，并没有直接实例化&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthListener&lt;/code&gt;，而是将其放在数组中，遍历调用，当然你可以将其放在某个配置文件中读取过来，则是更加灵活的方式。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Events\RequestEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里是显而易见的分发&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;事件，第一个参数是事件名，第二参数则是分发内容。需要注意的是，分发的操作一定要放在&lt;code class=&quot;highlighter-rouge&quot;&gt;$response-&amp;gt;send()&lt;/code&gt;之前，不在此之前整个生命周期就已经结束，再也无法触发了。&lt;/p&gt;

&lt;p&gt;不出意外，重新刷新浏览器，会出现如下结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You have been banned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;整个事件分发的开发就已经结束了，也非常之简单吧。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;至此，整个「从头开始搭建Web框架」的教程就已经结束，本教程不是对源代码的解析，只是粗略的从自己构建一个Web框架开始，让大家能够稍微理解一个框架的架构，所以代码难免会粗糙，剩下来的内容全凭读者自己去完成，这一方面节省了笔者大量的时间，另一方面能够留给大家足够动手的乐趣。&lt;/p&gt;

&lt;p&gt;如果阅读完整个教程，你还有什么意见或者建议，都可以通过文章下面的联系方式，联系到我，最后，希望大家读完能够有所收获，(:&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/php%20tutorial%20laravel/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAWeb%E6%A1%86%E6%9E%B6-%E4%B8%89-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/php%20tutorial%20laravel/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAWeb%E6%A1%86%E6%9E%B6-%E4%B8%89-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91.html</guid>
        
        <category>PHP</category>
        
        <category>Laravel</category>
        
        
        <category>PHP Tutorial Laravel</category>
        
      </item>
    
      <item>
        <title>从头开始搭建Web框架（二）- 控制器</title>
        <description>&lt;p&gt;在上一篇，介绍了路由的实现，有了路由做请求流量的分发，现在需要在控制器取得请求数据，并进一步实现我们的业务逻辑。&lt;/p&gt;

&lt;p&gt;这时候需要我们使用到另一个模块：&lt;code class=&quot;highlighter-rouge&quot;&gt;http-kernel&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;http-kernel&quot;&gt;http-kernel&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; composer require symfony/http-kernel
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装完此模块之后，我们先不着急使用，先新建出我们控制器所在的目录，并在&lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;中将此目录添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;autoload&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我在&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;的同级新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;目录，用来存放控制器文件，并在&lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;中添加如下内容：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;autoload&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;psr-4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Controller\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;controller/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; composer dump-autoload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;文件，修改原来的路由添加的代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-150749.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;只是增加控制器所在路径，和对应的函数，这里需要注意，控制器的路径一定是要包含命名空间的全路径，并且每层命名空间是以&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;分隔，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;，在后面调用的时候，我会稍作解释实现原理。&lt;/p&gt;

&lt;p&gt;最后修改后面的部分代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-151833.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在初始化&lt;code class=&quot;highlighter-rouge&quot;&gt;ControllerResolver&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentResolver&lt;/code&gt;之后，将路由匹配的参数添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;Request&lt;/code&gt;对象中，也就是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$request-&amp;gt;attributes-&amp;gt;add($attributes);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;便是由此解析而来。如果你点到&lt;code class=&quot;highlighter-rouge&quot;&gt;getController()&lt;/code&gt;里面看一看，就可以发现，源码也是如此的简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-153025.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-152819.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在创建控制器的时候，会将&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller\IndexController::index&lt;/code&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;::&lt;/code&gt;分隔为两个部分，第一分部为类路径，另一个部分为函数名，在调用初始化控制器的时候，将第一部分的类路径&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller\IndexController&lt;/code&gt;直接作为参数传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;instantiateController()&lt;/code&gt;，而直接&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;就完成了实例化过程。&lt;/p&gt;

&lt;h2 id=&quot;控制器&quot;&gt;控制器&lt;/h2&gt;
&lt;p&gt;完成所有路由部分的代码，在我们新建&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;目录下，新建&lt;code class=&quot;highlighter-rouge&quot;&gt;IndexController&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-154659.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以发现，不仅可以将&lt;code class=&quot;highlighter-rouge&quot;&gt;$name&lt;/code&gt;做为&lt;code class=&quot;highlighter-rouge&quot;&gt;index()&lt;/code&gt;方法的参数传递过来，而且甚至可以将&lt;code class=&quot;highlighter-rouge&quot;&gt;Request&lt;/code&gt;对象注入其中，甚至两个变量的位置都可以颠倒，但必须要注意的是必须要加上类型约束，这种方式的实现得益于PHP原生的&lt;a href=&quot;http://php.net/manual/zh/class.reflection.php&quot;&gt;Reflection类&lt;/a&gt;，具体实现可以查阅部分源码，这里不赘述。&lt;/p&gt;

&lt;p&gt;重新刷新页面，我们可以看到如下的结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:7777/hello =&amp;gt; Hello World and your Languages is zh_CN
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，就完成路由到控制器的流程，整个过程是非常简单的，但是如果你想深入，也是可以通过阅读里面的部分源码来深入了解整个解析器模块，如何解析出控制器实力，如何解析出参数等等。&lt;/p&gt;

&lt;p&gt;在下面的一章，我不会接着MVC的逻辑去实现Model层。Model层和整个框架没什么&lt;strong&gt;强关联&lt;/strong&gt;，仅仅是安装指定的包罢了，你可能喜欢Laravel的&lt;code class=&quot;highlighter-rouge&quot;&gt;Eloquent&lt;/code&gt;，或者其他的第三方的包，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;Doctrine ORM&lt;/code&gt;，即装即用。&lt;/p&gt;

&lt;p&gt;我会讨论更加有意思的事件分发模块&lt;code class=&quot;highlighter-rouge&quot;&gt;symfony/event-dispatcher&lt;/code&gt;，让我们的框架更容易扩展，更加灵活。&lt;/p&gt;

&lt;h2 id=&quot;代码片段&quot;&gt;代码片段&lt;/h2&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\HttpFoundation\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\HttpFoundation\Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\RouteCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\RequestContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\Matcher\UrlMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\Exception\ResourceNotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\HttpKernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 增加路由
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouteCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/hello/{name}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'_controller'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Controller\IndexController::index'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createFromGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化路由上下文
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// URL匹配器
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UrlMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 控制器解释器和参数解释器
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$controllerResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpKernel\Controller\ControllerResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$argumentResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpKernel\Controller\ArgumentResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPathInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$controllerResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$argumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;call_user_func_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ResourceNotFoundException&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Not Found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'An error occurred'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html&quot;&gt;https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://php.net/manual/zh/class.reflection.php&quot;&gt;http://php.net/manual/zh/class.reflection.php&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/php%20tutorial%20laravel/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAWeb%E6%A1%86%E6%9E%B6-%E4%BA%8C-%E6%8E%A7%E5%88%B6%E5%99%A8.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/php%20tutorial%20laravel/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAWeb%E6%A1%86%E6%9E%B6-%E4%BA%8C-%E6%8E%A7%E5%88%B6%E5%99%A8.html</guid>
        
        <category>PHP</category>
        
        <category>Laravel</category>
        
        
        <category>PHP Tutorial Laravel</category>
        
      </item>
    
      <item>
        <title>从头开始搭建Web框架（一）- 路由</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;能够熟练地使用一个框架是远远不够的，还需要了解她的内心。—— J.J Terry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;为什么要自己搭建web框架&quot;&gt;为什么要自己搭建Web框架&lt;/h2&gt;

&lt;p&gt;如果跟你周围的工程师说「我要自己搭建一款web框架」，他们可能会说「疯了吧，何必自己造轮子呢？」，大多数情况下他们是对的，完全没必要自己重新造轮子，这是一件吃力而且不讨好的事情，但是总有人想尝试点新东西，他们的原因可能有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;想简单了解一些Web框架的构架&lt;/li&gt;
  &lt;li&gt;对Web框架有独特的需求，比如：完全不想要视图层&lt;/li&gt;
  &lt;li&gt;好玩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果其中有一个原因命中你，那么就跟着这几篇文章，来构建你自己的一个Web框架吧，放轻松，我们不会从源码开始。&lt;/p&gt;

&lt;h2 id=&quot;概览&quot;&gt;概览&lt;/h2&gt;

&lt;p&gt;如果你稍微看过&lt;code class=&quot;highlighter-rouge&quot;&gt;Laravel&lt;/code&gt;的组成结构，可以发现，&lt;code class=&quot;highlighter-rouge&quot;&gt;Laravel&lt;/code&gt;也是由很多个组件所组成的，并不是所有部分都是自己完成，其中大部分都是&lt;code class=&quot;highlighter-rouge&quot;&gt;Symfony&lt;/code&gt;的组件，我们同样用&lt;code class=&quot;highlighter-rouge&quot;&gt;Symfony&lt;/code&gt;的组件来完成这个简易的Web框架。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-15-Jietu20180815-111753%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-foundation&quot;&gt;HTTP-Foundation&lt;/h2&gt;

&lt;p&gt;试想一下，我们第一次接触到PHP，没用任何框架的时候，代码是怎样的？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-15-Jietu20180815-114300%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接收到参数，逻辑处理，然后做出响应，所有框架都是在此基础上扩展而来，这是框架最基本的功能。&lt;/p&gt;

&lt;p&gt;我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;http-foundation&lt;/code&gt;这个组件对这个最基本的功能进行扩展。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; composer require symfony/http-foundation
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码就可以修改为如下内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-15-Jietu20180815-124401%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$request = Request::createFromGlobals();&lt;/code&gt;表示创建的&lt;code class=&quot;highlighter-rouge&quot;&gt;Request&lt;/code&gt;对象是基于PHP全局变量(&lt;code class=&quot;highlighter-rouge&quot;&gt;$_GET&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$_POST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$_FILE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$_COOKIE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$_SESSION&lt;/code&gt;等等)的，&lt;code class=&quot;highlighter-rouge&quot;&gt;send()&lt;/code&gt;方法则将&lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt;对象返回给客户端，这种面向对象类型的编程方式，大大改善了代码可用性和稳健性。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// 获取URL中路径
$request-&amp;gt;getPathInfo();

// 获取GET或POST请求中的参数对应的值
$request-&amp;gt;query-&amp;gt;get('foo');
$request-&amp;gt;request-&amp;gt;get('bar', 'default value if bar does not exist');

// 获取 SERVER 的变量信息
$request-&amp;gt;server-&amp;gt;get('HTTP_HOST');

// 获取上传的文件
$request-&amp;gt;files-&amp;gt;get('foo');

// 获取Cookie的值
$request-&amp;gt;cookies-&amp;gt;get('PHPSESSID');

// 获取header头相关的信息
$request-&amp;gt;headers-&amp;gt;get('host');
$request-&amp;gt;headers-&amp;gt;get('content_type');

$request-&amp;gt;getMethod();    // 获取请求方式：GET, POST, PUT, DELETE, HEAD
$request-&amp;gt;getLanguages(); // 获取接受的语言

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;

&lt;p&gt;要知道，我们不可能用一个PHP文件只处理来自一个URL的请求，这时候还需要用路由做分发，这时候，我们需要第二个模块&lt;code class=&quot;highlighter-rouge&quot;&gt;http-kernel&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; composer require symfony/routing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;则将我们的代码修改成如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-16-Jietu20180816-111657.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$routes-&amp;gt;add('hello', new Route('/hello/{name}', array('name' =&amp;gt; 'World')));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是我们添加的第一个路由规则，&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;为路由名，而&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;则为匹配到的变量名，默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;World&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$attributes = $matcher-&amp;gt;match($request-&amp;gt;getPathInfo());
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;经过路由匹配器的匹配之后，会分解出包含&lt;code class=&quot;highlighter-rouge&quot;&gt;_route&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;的数组。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [
        '_route' =&amp;gt; 'hello',
        'name'   =&amp;gt; 'World'
 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;知道路由名和取得的参数，我们便可以实现业务逻辑：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        extract($attributes);
        if($_route == 'hello') {
            $content = 'Hello ' . $name;
        }
        $response = new Response($content, 200);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在终端中运行&lt;code class=&quot;highlighter-rouge&quot;&gt;php -S 127.0.0.1:7777&lt;/code&gt;,  在浏览器中访问对应的路由可得到如下的结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:7777/hello =&amp;gt; Hello World

http://127.0.0.1:7777/hello/Liam =&amp;gt; Hello Liam

http://127.0.0.1:7777/foo =&amp;gt; Not Found

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;http-foundation&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;http-routing&lt;/code&gt;这两个组件就基本上实现了我们的路由功能，在下个部分，会带大家使用控制器去实现逻辑代码。&lt;/p&gt;

&lt;h2 id=&quot;代码片段&quot;&gt;代码片段&lt;/h2&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\HttpFoundation\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\HttpFoundation\Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\RouteCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\RequestContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\Matcher\UrlMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\Routing\Exception\ResourceNotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 增加路由
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouteCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/hello/{name}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createFromGlobals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化路由上下文
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// URL匹配器
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UrlMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPathInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 匹配的数组分解为变量
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ResourceNotFoundException&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Not Found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'An error occurred'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://symfony.com/doc/current/create_framework/http_foundation.html#going-oop-with-the-httpfoundation-component&quot;&gt;https://symfony.com/doc/current/create_framework/http_foundation.html#going-oop-with-the-httpfoundation-component&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://symfony.com/doc/current/create_framework/routing.html&quot;&gt;https://symfony.com/doc/current/create_framework/routing.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://php.net/manual/zh/function.extract.php&quot;&gt;http://php.net/manual/zh/function.extract.php&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/php%20tutorial%20laravel/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A1%86%E6%9E%B6-%E4%B8%80-%E8%B7%AF%E7%94%B1.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/php%20tutorial%20laravel/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A1%86%E6%9E%B6-%E4%B8%80-%E8%B7%AF%E7%94%B1.html</guid>
        
        <category>PHP</category>
        
        <category>Laravel</category>
        
        
        <category>PHP Tutorial Laravel</category>
        
      </item>
    
      <item>
        <title>中型Laravel项目架构(二) - 控制器和模型</title>
        <description>&lt;p&gt;在上篇文章中，我介绍了路由层和中间件层可以优化的地方，此篇便开始介绍中型Laravel架构中普遍存在的问题：控制器和模型&lt;/p&gt;

&lt;p&gt;很多人在初次接触到Laravel此类MVC框架的时候，开发没有任何规范，完全靠着Laravel项目路径在走，控制器写逻辑代码，模型写数据层代码，刚开始的逻辑代码可能全部都堆积在控制器，后来日益增加的复用压力，让很多人把代码写到了模型层，导致无论是控制器还是模型里，都堆积着大量冗余的代码，给复用，重构，都带来不小的压力和不便。&lt;/p&gt;

&lt;p&gt;User的Model里面包含着非常多的逻辑代码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-13-Jietu20180813-235521.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;service-和-repository&quot;&gt;Service 和 Repository&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-13-service-repository-pattern.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了解决代码过于冗余的问题，最简单的方法就是将代码逻辑分更多的层，只有更细的粒度，才能更好的复用，所以，引入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Repository&lt;/code&gt;，那么既然都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; 之间一层，那么这两层有什么区别呢？正如上图所表示的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Service 层更加贴近业务逻辑，复杂的逻辑在这里开始分解，组合。&lt;/li&gt;
  &lt;li&gt;Repository 层更加贴近数据逻辑，对数据库的读写操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有了&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Repository&lt;/code&gt;，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;功能就大大弱化了，但还是有非常重要的作用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Controller 用来接收通过路由传递过来的数据，并对数据进行清洗和整理，递交给 Service&lt;/li&gt;
  &lt;li&gt;Model 仅仅当做Eloquent的类，无其他实质作用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;整个结构划分的过程中，我们要谨记&lt;a href=&quot;https://www.wikiwand.com/en/SOLID&quot;&gt;SOLID原则&lt;/a&gt;中的两个原则：&lt;code class=&quot;highlighter-rouge&quot;&gt;单一职责&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;依赖注入&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;单一职责&lt;/code&gt;前面已经说过，&lt;code class=&quot;highlighter-rouge&quot;&gt;依赖注入&lt;/code&gt;是通过Laravel特性完成。&lt;/p&gt;

&lt;h2 id=&quot;代码示例&quot;&gt;代码示例&lt;/h2&gt;
&lt;p&gt;通过一个简单的用户创建的例子，来说明&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Repository&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;如何配合起来的。&lt;/p&gt;

&lt;p&gt;在接受到从路由传递过来的参数，&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;对参数进行接受和处理，并调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;实现逻辑：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-14-Jietu20180814-105903.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到，&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 的调用，并不是通过实例化来实现的，而是通过&lt;a href=&quot;https://laravel.com/docs/5.3/container&quot;&gt;依赖注入&lt;/a&gt;的方式，后面 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Repository&lt;/code&gt;也是同样的方式。&lt;/p&gt;

&lt;p&gt;可以看到，&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; 里面基本是没什么逻辑代码的，仅仅只作接受和响应的处理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-14-Jietu20180814-110854.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 中，所有的逻辑代码都是在这里，首先检查一下手机已经注册，如果没注册就进行创建操作，这里只是实现逻辑，而具体数据层的实现，则放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Repository&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-14-Jietu20180814-140926.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;知道如此对代码分层，这就需要我们写代码的时候，要有一定的构思，更低粒度的数据层操作放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Repostory&lt;/code&gt;，代码逻辑放在&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;，围绕这两点，代码则会越来越精简，复用性更加地好。&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/php%20tutorial%20laravel/E4-B8-AD-E5-9E-8BLaravel-E9-A1-B9-E7-9B-AE-E6-9E-B6-E6-9E-84(-E4-BA-8C)-20-20-E6-8E-A7-E5-88-B6-E5-99-A8-E5-92-8C-E6-A8-A1-E5-9E-8B.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/php%20tutorial%20laravel/E4-B8-AD-E5-9E-8BLaravel-E9-A1-B9-E7-9B-AE-E6-9E-B6-E6-9E-84(-E4-BA-8C)-20-20-E6-8E-A7-E5-88-B6-E5-99-A8-E5-92-8C-E6-A8-A1-E5-9E-8B.html</guid>
        
        <category>PHP</category>
        
        <category>开发环境</category>
        
        <category>Laravel</category>
        
        
        <category>PHP Tutorial Laravel</category>
        
      </item>
    
      <item>
        <title>中型Laravel项目架构(一) - 路由和中间件</title>
        <description>&lt;p&gt;对于像Laravel此类的MVC框架来说，初学者或者没有架构概念的使用者，一般会有几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所以逻辑都写在Controller，导致Controller臃肿&lt;/li&gt;
  &lt;li&gt;所有逻辑都写在Model，导致Model臃肿&lt;/li&gt;
  &lt;li&gt;代码过于分散，不能很好的复用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这其实都不能算得上是错误，对于一个小微型的应用来说，如此实现很快很好用，并且维护简单，但是如果代码量到了一定程度，就非常痛苦，Controller或者Model总是一坨一坨的代码，写到Model里倒也还行，如果总是在Controller中，还没办法复用，下次遇到相似逻辑就直接复制过来，然后修修改改，这一坨代码变成那一坨。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作为一个Coder，我的要求是: 「代码要有洁癖」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-12-Jietu20180812-125217.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;知道问题出在哪里，我们开始重构我的代码。&lt;/p&gt;

&lt;h2 id=&quot;路由-中间件&quot;&gt;路由-中间件&lt;/h2&gt;
&lt;p&gt;虽然路由这方面的优化不大，但我还是想从这个项目的开始来谈起，路由的命名，以及中间件的使用，值得我去稍作注意。&lt;/p&gt;

&lt;h3 id=&quot;路由命名&quot;&gt;路由命名&lt;/h3&gt;
&lt;p&gt;路由的命名，很多人都用&lt;a href=&quot;https://www.wikiwand.com/en/Representational_state_transfer&quot;&gt;RESTful&lt;/a&gt;的方式来做为标准，在开发过程和前端同事协作的过程中，前端的工程师并不喜欢使用此类标准。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;既然都是HTTP请求，区分POST和GET请求本身就十分麻烦，更别提GET请求参数放在URL上了。- 前端工程师&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果按照标准的&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;的开发标准，对于用户的某个接口，可能是如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET: /User 列出所有用户信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;POST: /User 新建一个用户信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;PATCH: /User/ID 更新一个用户信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Delete: /User/ID 删除一个用户&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同样的URI定义，不同的是协议(动作)的不同，如果沟通不善，或者开发不注意很可能就导致接口的错误调用，&lt;strong&gt;更新操作变删除，列表操作变新建&lt;/strong&gt;，给开发造成非常大的困扰。&lt;/p&gt;

&lt;p&gt;我们采用RESTful的&lt;a href=&quot;https://www.infoq.com/articles/rest-anti-patterns&quot;&gt;反模式&lt;/a&gt;来重新设计整个API，全部采用POST请求，URI中包含动作，所以上面的接口地址就改写为：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET: /Users 列出所有用户信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET: /User/Create 新建一个用户信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET: /User/Update 更新一个用户信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET: /User/Delete 删除一个用户&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的改写可以说是，完全不符合RESTful标准的，但是也不必拘泥于此标准，适合整个团队的方案就是最好的方案。&lt;/p&gt;

&lt;h3 id=&quot;中间件的使用&quot;&gt;中间件的使用&lt;/h3&gt;
&lt;p&gt;路由的下一层就到达了中间件，很多初级的开发者都会忽略掉这一层，认为逻辑控制应该放在控制器，对于一些对于请求和相应需要处理的统一操作，都可以放在中间件里来实现，比如：用户权限的验证，Log服务等等。&lt;/p&gt;

&lt;p&gt;具体中间件的使用不做介绍，举一个小例子，每次API接口请求都包含着Token，我们是同过Token来获取某个用户的信息，验证用户的合法性，那么这个操作就可以放到中间件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-13-Jietu20180813-232148.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且还可以使用Laravel中的容器注入，将验证后的用户信息放入，以便在控制器中使用，非常之方便。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-13-Jietu20180813-232430.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以说，中间件是介于请求和响应之间的一层，非常适合做统一的请求，响应处理，这些统一的逻辑切记不要放在控制器中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-13-middleware.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/php%20tutorial%20laravel/E4-B8-AD-E5-9E-8BLaravel-E9-A1-B9-E7-9B-AE-E6-9E-B6-E6-9E-84(-E4-B8-80)-20-20-E8-B7-AF-E7-94-B1-E5-92-8C-E4-B8-AD-E9-97-B4-E4-BB-B6.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/php%20tutorial%20laravel/E4-B8-AD-E5-9E-8BLaravel-E9-A1-B9-E7-9B-AE-E6-9E-B6-E6-9E-84(-E4-B8-80)-20-20-E8-B7-AF-E7-94-B1-E5-92-8C-E4-B8-AD-E9-97-B4-E4-BB-B6.html</guid>
        
        <category>PHP</category>
        
        <category>开发环境</category>
        
        <category>Laravel</category>
        
        
        <category>PHP Tutorial Laravel</category>
        
      </item>
    
      <item>
        <title>Node.JS 创始人 Ryan Dahl 专访（二）</title>
        <description>&lt;p&gt;原文链接：&lt;a href=&quot;https://www.mappingthejourney.com/single-post/2017/08/31/episode-8-interview-with-ryan-dahl-creator-of-nodejs/&quot;&gt;Episode 8: Interview with Ryan Dahl, Creator of Node.js - Mapping The Journey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：你在Node之旅结束之后，你又什么新的打算呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;: 在Node之后，我离开了Joyent并且退出了Node项目，我搬到了纽约，把工作的一些时间用到了个人项目上，所以，我启动了一大堆的项目，与此同时，Instagram横空出世，作为一个全新的搅局者，它看起来却如此简单，所有人都说，这太简单了，我也能构建一个。我情不自禁地也有如此的想法，所以呢，我创建了一个社交网络的项目，还有为C++创建的构建系统，另一个是HTML的构建系统，有点像Browserify，可以更加方便地打包Javascript和HTML。&lt;/p&gt;

&lt;p&gt;我有非常多的个人项目，但我认为没一个是成功的，其中有很多放在现在也是无关紧要的东西，比如社交网络的项目。后来我了解了卷积网络和图片分类，这使我对机器学习非常感兴趣。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pramod&lt;/strong&gt;:你也参加了谷歌大脑的常驻计划，这段经历是怎么样的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是的，我在山景城度过了一年的时间，所以，回头看看，TensorFlow两年前就发布了。&lt;/p&gt;

&lt;p&gt;随之，他们宣布了谷歌大脑的常驻计划，他们邀请了大概20个人来到谷歌大脑，谷歌机器学习研究实验室的一部分。我认为这个计划并不是让那些研究机器学习的人来参与，而是让一些有数学和编程经验并且对机器学习感兴趣的人去发现新的点子，因为机器学习实在是变化太快了，需要非常大的工作量。&lt;/p&gt;

&lt;p&gt;但是现在整个社区都致力于在机器学习最有用的部分：神经网络，也吸引了非常多的人参与其中，新的机器学习框架TensorFlow也带来了很多很有意思的点子。我在那里度过了一年的时光，基本上都是在写编程模型和相关的论文，主要工作的内容是图像之间的转换问题，比如，如果你输入一些图片，你想预测输出的图片是什么。我发现这个问题非常有意思。&lt;/p&gt;

&lt;p&gt;比如，彩色化问题，你可以用一张黑白照片作为输入，然后就可以预测作为输出图片的色彩，这个问题酷的地方在于你可以有无限的训练数据，随便取一张彩色照片，然后降低其饱和度，这就是你可以输入的图片了。&lt;/p&gt;

&lt;p&gt;主持人：TensorFlow对于机器学习来说是非常好的平台，可以解决比如图像分类，图像转换等问题，我虽然知之甚少，但是我相信这一定是非常美妙的。你会接着为机器学习贡献你的力量吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是的，至少目前是这样，我仍然在谷歌工作，解决这一系列的问题，并且尝试帮助更多的研究者去构建下一代系统，下一代的模型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pramod&lt;/strong&gt;：研究机器学习模型和Javascript, Node或者网络开发有非常大的不同吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：我想是这样的，但是我是从数学开始的，我又非常坚实的数学基础，人们总是把自己固定在某一个领域，我是非常不认同的，我不认为自己会是一个专门写Javascript的人，也不会是一个专门从事机器学习的人，兴趣会带来无限的可能，最让人兴奋的是创建一些自己从未做过的并且能够让人类收益的事。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：是啊，机器学习需要非常好的数学背景。你在Optimistic Nihilism上发表的最近的文章写到，我们有可能在将来的某一天模拟大脑，并且构建出能够理解人类行为的系统，距离这些还有多远能够达到？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是的，我必须对此类的预言必须小心谨慎，在我看来，我们永远都无法到达与人类的智力程度，我们使用的机器学习系统是非常非常简单的，根本无法工作。事实上，我有一篇关于我的实习的博客文章，其中列举了开发这些模型的所有困难。我认为不从事这一领域工作的人会有这样的想法，你可以利用这个模型并通过它推送一些数据，它就会起作用。但事实并非如此。这些事情都是非常挑剔的，而且不容易理解，并且需要花费很多、很多个月的仔细调整和实验才能得到哪怕是最差的结果。&lt;/p&gt;

&lt;p&gt;所以说，我们离那还差得很远很远，但是作为基础，最近一些非常有前途的技术得到了很大的改进，比如卷积网络，一些传播法等等。这些东西都是建立在训练模型上的，神经网络模型并不像我们的大脑，大脑是可以受到启发而学习，这才是真正迷人的地方。当然了我们也有大量的GPU，可以通过分布式GPU来进行训练的扩展，所以我认为基础构建越大，系统也会越智能。就我个人而言，作为一个无神论者，我相信我们大脑里面除了化学物质和神经元之外没有其他的什么东西。我认为我们的意识都是以编码的方式，在神经元之间传播互动，所以，在这个领域有足够多的研究，去模仿这种行为，也是有可能的实现的。但这实在是太遥远了，也无法预测多久能够实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：在接下来的20年，你希望科技发展有哪些变革？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：我对机器学习和它所带来的可能性感到兴奋，即使在人工智能真正开始之前，机器学习仍然有非常多应用前景。比如，智能眼镜都会给你带来非常大的帮助，我们可以从中获益颇多。因此，有无数的工业过程可以利用机器学习来改善，比如回收中心，拥有电脑视觉处理的分类回收，等等。会有很多很多的系统会从机器学习中受益，这将对科技领域产生重大影响，对全人类都产生重大影响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：机器学习的确非常让人兴奋，当我在山景城看到无人驾驶汽车的时候，我觉得非常新奇。总有一天，我就仅仅坐在车里，然后完全让车自己控制。谢谢你，Ryan，为我们带来了Node，同样感谢你今天的采访。希望你再以后的项目里能够越来越好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;: 好的，谢谢你邀请我来，跟你讨论这些非常的有趣。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/%E8%AF%91%E6%96%87/Node.JS-%E5%88%9B%E5%A7%8B%E4%BA%BA-Ryan-Dahl-%E4%B8%93%E8%AE%BF-%E4%BA%8C.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/%E8%AF%91%E6%96%87/Node.JS-%E5%88%9B%E5%A7%8B%E4%BA%BA-Ryan-Dahl-%E4%B8%93%E8%AE%BF-%E4%BA%8C.html</guid>
        
        
        <category>译文</category>
        
      </item>
    
      <item>
        <title>Node.JS 创始人 Ryan Dahl 专访（一）</title>
        <description>&lt;p&gt;原文链接：&lt;a href=&quot;https://www.mappingthejourney.com/single-post/2017/08/31/episode-8-interview-with-ryan-dahl-creator-of-nodejs/&quot;&gt;Episode 8: Interview with Ryan Dahl, Creator of Node.js - Mapping The Journey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-26-image.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ryan现在是谷歌大脑的一名软件工程师，他是Node.js的作者，一个基于Chrome V8引擎的JavaScript的运行时环境。现在，他的工作方向是深度学习，主要专注于图像之间的转换，比如彩色化，提升像素，他在不同的项目都有所贡献，像 HTTP 解析器，libuv等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：大家好，欢迎大家踏上今天的采访之旅，当我们听到Node.js的时候，第一时间想到的就是Ryan Dahl。他向我们展示了一种全新的异步编程模型，以前我们所做的I/O可能都是完全是错的。今天我们请到的就是Ryan，一名黑客，卓越的编程者，Node的作者。我非常激动和荣幸Ryan能来参加今天的采访，欢迎你，Ryan。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：大家好，非常高兴能接受这个采访。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：我们都知你是Node的作者，你稍微说一说你在从事科技行业之前你的生活么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：当然，我是在圣地亚哥长大的，母亲在我6岁的时候买了一台Apple 2C电脑，这是我最早接触到的电脑。我现在36岁，换句话说，我的年龄和互联网的年龄一样大。我先是在圣地亚哥的社区大学读书，然后去了加利福尼亚大学圣地亚哥分校读数学，后来，在罗切斯特大学的研究生学院读数学。&lt;/p&gt;

&lt;p&gt;我在那里研究代数拓扑学，一门非常抽象的学科，刚开始的几年感觉这门学科非常优美，后来就渐渐的觉得无聊，因为实在是没有什么实际应用的场景。在研究生毕业之后，就顺其自然地读了Ph.D。在某一天，我突然意识到，我真的不想在我余生成为一名数学家，然后就退学了。然后，买了一张去美国南部的单程机票并在那呆了一年，在那里我依然保持着学生的刻苦学习，和Eric一起做一些网页开发，这也就是编程职业生涯的开端。那时候是为一家滑雪板公司做网页，基于ROR的网页开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：从Ph.D退学，去美国南部做网页开发一定是一次无比正确的经历吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是啊，我的意思是，从研究生学院出来，曾经解决都是非常抽象的问题，然而网页开发则是一种混合的过程，我还尝试把我在研究生学院学到的优雅的数学知识融入进去，这也是我非常喜欢用Ruby开发的原因吧，你可以用Ruby更好的表达的意图，这是非常有意思的，Rails框架在这方面就体现得很好，它发明了一种「模型，视图，控制器」架构，也许不是第一个，但是一定是Rails让这种架构流行起来的，数学的优雅和编程的应用，这两者的结合，真的非常吸引我。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：编写网页程序的确十分有趣，Ruby也是一个非常完美的工具。接下来，你在德国以自由工作者的方式接着工作，其中一个项目就是Node，为此你为Node连续工作了六到八个月？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是的，在从美国南部离开之后，便和女朋友搬到了德国，因为她是一个德国人，而且必须返回大学。就在从那开始，我开始参加那里的Ruby大会，在那里大家开始讨论这种MVC模型，其中有一个叫Chris Neukirchen的小伙伴，他开发了一个叫做Rack的项目，一个精简抽象的网页服务器程序，它将网页服务器集合到一个单函数接口中，接收到请求，你便可以返回一个响应。&lt;/p&gt;

&lt;p&gt;于此同时，我正在为一家公司做一些Nngix扩展的开发工作，在Nginx的世界中，所有的一切都是异步的，所以说，当你开发Nginx扩展的时候就必须特别小心拥塞的问题，这个时候，我开始思考如何把Chris的Rack项目和Nginx的非拥塞模型合并在一起呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：那时你就有些关于Rack和Nginx的想法了，那么你是如何说服你自己花费六个月的时间，实现一个能够运行在服务端端javascript框架，以此来提升性能的想法呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：这其中有两个部分，一个部分是简单的服务器接口，Rack，另一个是完全异步的部分就是Nginx，我开始思考这两者，就在这个时候，Chrome在2008年的12月发布，同时发布的还有V8引擎，我开始在这个V8引擎中摸索，它看起来如此让人着迷，简洁，高效，此时我突然明白，javascript就是单线程，但所有处理都是非阻塞的。&lt;/p&gt;

&lt;p&gt;这让我觉得有点匪夷所思，但是网页浏览器的确所有请求都是非阻塞的啊，无论是AJAX请求还是其他，然后我就在想如果javascript加上异步IO加上一些HTTP服务器的内容，一定会是一件非常酷的事情，对于这个想法我非常兴奋，并坚持不懈的为此工作了四年。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：的确是这样，Javascript加上异步IO起到了非常好的效果，我想开发者们都在寻找一种如此实现的框架。在那段困惑的事情，有没有人给你一些建议呢？还是就仅仅是你一个人？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：就仅仅是我一个，编程界的一些朋友也给了我一点建议，但最初的工作就仅仅是我在家里编写出来的，后来，搬到旧金山，见了一些编程界大牛，这些人给了很多的想法也为后来的Node作出了很大的贡献。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：从你2009年以来开始开发Node，在这段时间，你的心路历程是怎样的呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：我认为至少对我来说，在我人生中，没有比那时更加棒了。Node就是那个等着我去做并且不得不做事情。也许其他人也有此类的想法，但是我能够实现的的原因，主要得益于我的自由工作，这使我有大量的自由时间，可以连续不停地好几个月为之编写代码，这也是一个项目的初始版本所必要的条件，无论怎么说，这段经历非常棒，也非常有意思。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：这真是非常美妙的经历，你做的非常棒。Node是基于「完全异步」的模型的，你为这个想法做了哪些工作呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：这也是个非常有趣的问题，我现在已经好几年没有为Node编写任何代码了，当Node刚诞生的时候，我到处去演讲，希望可以说服更多的人，让他们相信以前我们所做的I/O操作可能都是错的，我们可以用异步的方式来操作所有的事情，这也能解决编程方面上很多的难题。比如，即使是在单进程的情况下，通过异步也能处理非常大流量的请求，在那段时光里，我是强烈相信这个理念的，但是在后来的几年里，我 也意识到异步不是编程最终解决方案，而是仅仅是个开始，尤其是，当Go语言诞生以后。&lt;/p&gt;

&lt;p&gt;Go语言诞生已经有很长一段时间了，我是大约2012年才第一次接触到Go，Go语言拥有非常漂亮的运行时环境，还有特别健康的线程管理，非常便于使用。&lt;/p&gt;

&lt;p&gt;Go语言给编程人员所提供的接口看似是堵塞的，其实不然，这真的是非常好的一种编程模型。在很多情况下，同步的编程方式是更要简单的，不必关心各种回调的嵌套问题，在Node中，想要实现就困单得多，你不得不在回调函数中去使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：我也非常喜欢Go的编程模型，使用goroutine真的非常简单和充满乐趣，现实中，我们就是用Go来搭建分布式应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：Go语言对应用级开发真的是合适，如果你要是构建服务层的应用，真的没有比Go更加合适的了。也就是说，我认为Node的非堵塞编程模型在javascript上表现得不错，因为不需要考虑线程的问题，但是回调地狱真的让人头疼，你不得不不停的在回调函数中做处理，但随着async关键词的出现，在javascript也能进行同步的操作了。&lt;/p&gt;

&lt;p&gt;我认为Node绝对不是构建大型网页服务的最好选择，我会用Go而不是Node，讲真的，这也是我离开Node的原因。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：选择正确的工具对开发者来说真的是非常重要，你现在对Node真的没有一点偏袒。当你在2009年柏林的JsConf上，向开发者介绍了Node.js，当时你对这些突如其来的成功感到惊喜么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是的，我四年都在这种连续不断的惊喜中，Node成长得非常快，越来越多的人喜欢Node。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：后来，你加入了Joyant公司，并在那里全职为Node工作，然后搬到了旧金山对吧？这段经历是怎么样的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：在这段人生经历中，我感到大家以我为中心，无论是在各种开发者大会中，还是其他地方。有一次，我去了日本，大家都来找我合影，我就感觉怪怪的。在线上也是同样的情况，无论什么时候发表什么评论，大概都会有100多个人的回复。&lt;/p&gt;

&lt;p&gt;所以，我不得不谨慎地选择自己的措辞，因为很多人在关注你，这实在是太奇怪了！我非常不喜欢这种感觉，作为一个程序员，我只想写点代码，不必顾虑太多就能分享自己的观点，所以这种感觉让我不是特别喜欢。&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/%E8%AF%91%E6%96%87/Node.JS-20-E5-88-9B-E5-A7-8B-E4-BA-BA-20Ryan-20Dahl-20-E4-B8-93-E8-AE-BF-EF-BC-88-E4-B8-80-EF-BC-89.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/%E8%AF%91%E6%96%87/Node.JS-20-E5-88-9B-E5-A7-8B-E4-BA-BA-20Ryan-20Dahl-20-E4-B8-93-E8-AE-BF-EF-BC-88-E4-B8-80-EF-BC-89.html</guid>
        
        
        <category>译文</category>
        
      </item>
    
      <item>
        <title>Swoole如何实现热加载(autoload)</title>
        <description>&lt;p&gt;Swoole的确是一款非常优秀的PHP框架，在性能上给予了PHP质的飞跃，在将部分业务逻辑嫁接到Swoole上之后，性能就提升了将近4倍，这还仅仅是没有使用异步等操作的情况下，如果有兴趣，可以查看&lt;a href=&quot;https://www.youtube.com/watch?v=IKF5IdBPlWY&quot;&gt;对比视频&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-13-%E6%88%AA%E5%9B%BE%202018-06-13%2016%E6%97%B609%E5%88%8622%E7%A7%92.png&quot; alt=&quot;&quot; /&gt;
但是Swoole现有的文档非常之匮乏，你可以把现有的文档看成API文档，而不是面向新手的教程，在使用Swoole的过程中，遇到的第一个问题，Swoole如何才能热加载呢？每次修改完代码还需要关闭服务然后重启，才能让新的文件加载进去，非常之不友好，在接下来的的内容中，便会解决这个问题。&lt;/p&gt;

&lt;h2 id=&quot;swoole的加载机制&quot;&gt;Swoole的加载机制&lt;/h2&gt;
&lt;p&gt;Swoole性能之所以如此优秀，很大原因是改变了以往每次请求便加载一遍文件的模式，而改成在服务器启动的时候统一加载所有的文件，在每次请求的时候不会进行再次加载和初始化，从而大大减少了请求的消耗。如果你已经了解一点Swoole的实现，可以知道Swoole在启动的时候，Manager进程会创建N个Worker进程来接受/发送数据，实现业务逻辑，当Worker进程因为致命错误而关闭，Manager进程会重新创建，便会重新加载文件。&lt;/p&gt;

&lt;h2 id=&quot;热加载实现&quot;&gt;热加载实现&lt;/h2&gt;
&lt;p&gt;在实现热加载之前我们先看一看代码，主文件&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;，加载的文件&lt;code class=&quot;highlighter-rouge&quot;&gt;greet.php&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'greet.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;请注意&lt;code class=&quot;highlighter-rouge&quot;&gt; include_once 'greet.php';&lt;/code&gt;这句并没有像我们以前写PHP代码放在文件的第一句，而是放在&lt;code class=&quot;highlighter-rouge&quot;&gt;$http-&amp;gt;on()&lt;/code&gt;的回调函数中，这是因为Worker进程因为致命错误而重启，但是Manager进程可不会，如果放在代码第一行，就表示只有Manager进程重启才会生效，这显然不是我们需要的。&lt;/p&gt;

&lt;p&gt;知道上面的加载机制，我们就可以想办法让Worker进程重启。&lt;/p&gt;

&lt;h3 id=&quot;方法一&quot;&gt;方法一&lt;/h3&gt;
&lt;p&gt;向Master进程发送&lt;code class=&quot;highlighter-rouge&quot;&gt;USR1信号&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;USR1信号&lt;/code&gt;通过Manager进程转发给Worker进程，Worker进程便会重启，我们如下实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kill -USR1 master_pid 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;查看Swoole的进程信息：
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-13-%E6%88%AA%E5%9B%BE%202018-06-13%2017%E6%97%B607%E5%88%8629%E7%A7%92.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;30322&lt;/code&gt;便是我们的主进程ID，&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -USR1 30322&lt;/code&gt; Woker进程会关闭，并被Manager重启，通过下面的图可以看到，Worker进程已经改变，但主进程进程却没有任何变化。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-13-%E6%88%AA%E5%9B%BE%202018-06-13%2017%E6%97%B610%E5%88%8604%E7%A7%92.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每次在&lt;code class=&quot;highlighter-rouge&quot;&gt;greet.php&lt;/code&gt;中修改完代码，用&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -USR1 30322&lt;/code&gt; 重启Worker进程，代码便会重新加载进去。这种方法缺陷也很明显，需要手动去给主进程发送信号，如果想要实现监听文件改动，自动发送信号，还需要继续编写代码，倒是有点得不偿失了。&lt;/p&gt;

&lt;h3 id=&quot;方法二&quot;&gt;方法二&lt;/h3&gt;
&lt;p&gt;可以同配置&lt;code class=&quot;highlighter-rouge&quot;&gt;max_request&lt;/code&gt;来控制Worker进程的最大任务数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个Worker进程在处理完超过此数值的任务后将自动退出，进程退出后会释放所有内存和资源。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这也变向地实现了Worker进程的自动重启，给&lt;code class=&quot;highlighter-rouge&quot;&gt;max_request&lt;/code&gt;设置值为1，也就是说当一次请求之后，Worker进程便会重启。&lt;/p&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;如下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'max_request'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'greet.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;greet.php&lt;/code&gt;的内容，重新刷新页面，内容已经改变，我们的热加载功能也实现了。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.catplanet.me/?id=10&quot;&gt;Swoole编程指南-2.6 热加载&lt;/a&gt;
&lt;a href=&quot;https://wiki.swoole.com/wiki/page/300.html&quot;&gt;max_request&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/swoole/Swoole-Autoload.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/swoole/Swoole-Autoload.html</guid>
        
        
        <category>Swoole</category>
        
      </item>
    
      <item>
        <title>一种极简的的生活方式</title>
        <description>&lt;p&gt;原文：&lt;a href=&quot;https://medium.com/s/story/a-minimalist-lifestyle-6c2872c28473&quot;&gt;https://medium.com/s/story/a-minimalist-lifestyle-6c2872c28473&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;极简的生活方式对每个人来说可能都是不同的，对于我而言，这种生活方式帮我在两年付清了42000美元的学生贷款，让我的重心回归我喜欢的事物，并且使我的生活重回正轨，在过去的六个月中，我感到非常的幸福，身心健康，还有内心的平静。&lt;/p&gt;

&lt;p&gt;但是，我无法保证在我生活中使用的具体的方式同样对你有效，但愿这些方法能够给你的生活带来一点指导。&lt;/p&gt;

&lt;h2 id=&quot;缩减你身边的东西&quot;&gt;缩减你身边的东西&lt;/h2&gt;

&lt;p&gt;就我而言，我通过各种非盈利机构捐掉了身边几乎70%的衣服，我逐渐意识到那些衣服一个月也穿不了几次，如果不喜欢，便不再保留它们，为了减少这些无用的东西，每过一个月我就会重新检查一遍衣橱。&lt;/p&gt;

&lt;p&gt;我同样也会渐渐的捐掉鞋子，包，书，马克杯，电子产品，甚至是一些工艺品。我想我可能会后悔，事实上，当捐掉这些东西之后的一段时间里，我甚至都忘了有这回事。我们生活中所需要的东西，其实并没有想象中的那么多。当然了，我仍然会保留着一些特殊意义的东西（比如，女朋友送给我的每张卡片，积少成多，现在也很可观了），这些东西，我也不在意它们多占用一点空间:)&lt;/p&gt;

&lt;p&gt;如果你和我一样生活在一个逼仄的房间里（合租的房子里有狗，兔子，但自己只有一间卧室），学会丢掉房间里从来没有用过和完全没有价值的东西来争取一点空间。&lt;/p&gt;

&lt;h2 id=&quot;关掉手机的所有通知&quot;&gt;关掉手机的所有通知&lt;/h2&gt;

&lt;p&gt;我手机上唯一的通知就是接收短信，通常还是女朋友给我发的，我相当确定我对她而言还是非常重要人，至于，邮件，新闻，社交网络，或者其他辅助性质的软件，统统关掉，并且不允许后台刷新。&lt;/p&gt;

&lt;p&gt;事实上，删掉手机上的社交软件对你并没有什么影响，几周前，我从手机上删掉了Twitter，Medium，Quora，Twitch，终于意识到我被这些操控着，很多人无论在哪都抱着手机，地铁上，电梯上，甚至是在走路，就是为了逃避短暂的无聊，我想更加无拘无束一点，最终，我也做到了。&lt;/p&gt;

&lt;p&gt;我还是保留着Instagram，不是不想删掉，而是没办法再网页上长传图片，除此之外，手机上基本上没什么软件了，只剩下，短信，播客，和笔记，仅此而已。没了手机的束缚，我更加积极，把注意力更多的放在这个多彩的世界上。最棒的是，当我用电脑浏览社交网络的时候，其实也完全没有落下什么内容嘛。&lt;/p&gt;

&lt;h2 id=&quot;选择简单健康的食物&quot;&gt;选择简单健康的食物&lt;/h2&gt;

&lt;p&gt;在每周我都会选择作一些简单健康的食物，煎三个鸡蛋，应付早饭，中午就是素食炒菜，晚饭一些沙拉就好，可能这些食物略显乏味，对我而言，每餐只要简单，有营养，够饱就好。想要健康的饮食的起点也不是那么高，在此之前，我的哲学都是，吃得相对健康一点，偶尔放纵一下自己，来点没那么多营养的小点心其实也挺好。保持食物的简单，去超市的次数也多了，不用一次买那么多一次吃不完的失误，准备食物的时间也越来越少，在饮食方面的生活开支也大大减少。&lt;/p&gt;

&lt;h2 id=&quot;除非特别喜欢纸质书在kindle上买电子书&quot;&gt;除非特别喜欢纸质书，在Kindle上买电子书&lt;/h2&gt;

&lt;p&gt;立志成为一个作家的我，把阅读看做一种使命。我每个月能看完四本书，为了保证自己卧室的整洁有序，减少杂乱，我只从图书馆借书，或者在Kindle上买书，把iPad丢进工作包，在通勤的时候便可以阅读。&lt;/p&gt;

&lt;h2 id=&quot;简化你的消费&quot;&gt;简化你的消费&lt;/h2&gt;

&lt;p&gt;极简的生活对我最大的影响便是改变了我高消费的习惯，曾经和大多数人一样，买东西都是用信用卡，现在我会估算每个月最低的消费，把这些钱放进借记卡里，从那里面进行消费。&lt;/p&gt;

&lt;p&gt;现在我制作&lt;a href=&quot;https://jennifertchan.net/blog/a-step-by-step-guide-on-how-to-make-the-perfect-budget&quot;&gt;一个简单的消费管理系统&lt;/a&gt; ，这使我在两年多的时间里减少了80%的消费，这个系统包括制定预算，建立紧急储备金，投资低息基金，我也会用现金和信用卡支付一些日常花销。&lt;/p&gt;

&lt;p&gt;我不仅会刻意的控制消费，还会预估一些生活中可能的麻烦而带来的经济焦虑，培养少买东西和自我投资（比如，书本）的意识，这会让你深深意识到其实自己已经很充实了。&lt;/p&gt;

&lt;h2 id=&quot;极简的生活方式是一场永无止境的人生之旅&quot;&gt;极简的生活方式是一场永无止境的人生之旅。&lt;/h2&gt;

&lt;p&gt;我接触过很多种方式来减少房间的杂乱，极简并不是你拥有什么东西，而是减少生活中无用的东西，以此来给那些对你真正有用的东西腾出空间，这便是少即是多的艺术。&lt;/p&gt;

&lt;p&gt;极简主义被很多精英人士奉为圭臬，对于那些低收入的穷人来说，好像并不能很好的运用到生活中，但在我对极简的定义并非如此，这不是白墙靠着昂贵精致的衣橱，摆放它们以达到极简的美感。&lt;/p&gt;

&lt;p&gt;对我来说，极简主义始终都是内心的改变，愈发聒噪世界里的安定，我猪脑袋里面闪过千万个想法的宁静，允许自己放慢步调的生活方式。&lt;/p&gt;

&lt;p&gt;通过减少作抉择，可以避免精神的消耗，建立简单的生活系统，比如饮食，金钱，我能够更加专注真正在意的东西：健康，工作还有我爱的人，自从这种转变，我变得更加幸福，冷静，还有更加不受束缚。&lt;/p&gt;

&lt;p&gt;正如极简主义者Joshua Fields Millburn和Ryan Nicodemus所指出的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;每个人都有自己的极简方式，但每个方式都通向了同一个地方：拥有更多时间，金钱，自由，和意义非凡的生活。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果极简的生活方式仍然不适合你，我倒也是可以理解，没有一种生活方式，生活哲学是适合所有人的，但这些大量极简生活方式中的理念可以变通为我们所用。&lt;/p&gt;

&lt;p&gt;对于我，简单生活的确是非常有效的，它让我在混乱生活环境保持冷静，高压的工作环境中保持理智，最重要的是，它让我能够以正确的角度看待日常的问题。&lt;/p&gt;

&lt;p&gt;我仍然不能说采用极简的生活方式能够解决我所有的问题，但可以自信的说，它使我的生活，无论是在私人还是工作层面上，都变得更加从容不迫。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;读完这篇文章之后，对我颇有启发，便把翻译成中文，希望能多的人能够有所感悟，全文有部分删节，总觉得原封不动翻译过来，做为亚洲人，读起来怪怪的，所以在保证不改变原意的情况下，做了部分删减和改动，当然能够阅读原文是最好的，原文链接放在了文章的最开头。&lt;/p&gt;

&lt;p&gt;回头说一说极简的生活方式，诚如作者所说的那样，这不是一种精致主义对美的追求，而是内心的改变，少即是多的生活哲学，这不是说，让我们减少欲望，让我们成为「佛系」青年，而是一种克制，无穷无尽的欲望是痛苦的根源，收拾房间，将那些根本用不到或者对我们没有任何意义的东西清理出去，给最需的东西让出地方，生活也是相同的道理，克己复礼为仁。&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/%E8%AF%91%E6%96%87/Translate-A-Minimalist-Lifestyle.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/%E8%AF%91%E6%96%87/Translate-A-Minimalist-Lifestyle.html</guid>
        
        
        <category>译文</category>
        
      </item>
    
      <item>
        <title>更好的PHP开发环境-Valet篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在前面的文章里，我介绍了&lt;a href=&quot;http://www.blue7wings.com/php%20tutorial/Better-Dev-Envirenment-Vagrant.html&quot;&gt;Vagrant&lt;/a&gt;和&lt;a href=&quot;http://www.blue7wings.com/php%20tutorial/Better-Dev-Envirenment-Docker.html&quot;&gt;Docker&lt;/a&gt;这两种开发环境的搭建，归根到底这两种开发环境都是基于虚拟环境的技术来实现的，对于一个Mac用户来说，本身系统就是类Linux的Unix操作系统，差异不大，完全没必要去安装一个虚拟机，在Mac上使用Linux操作系统。而大多数人的痛点就是，我不关心究竟用的是什么技术，只想把项目运行起来，而整个开发环境配置过于麻烦，&lt;code class=&quot;highlighter-rouge&quot;&gt;Nginx&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP&lt;/code&gt; 这一套从安装到配置就得不少时间。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Valet&lt;/code&gt;的出现就解决了这一痛点。&lt;code class=&quot;highlighter-rouge&quot;&gt;Valet&lt;/code&gt;是一套PHP开发套件，基于本地的PHP，&lt;code class=&quot;highlighter-rouge&quot;&gt;Valet&lt;/code&gt;解决了配置难的问题，一条指令就能完成所有的配置，非常之方便。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;默认你的Mac电脑上已经安装完&lt;code class=&quot;highlighter-rouge&quot;&gt;PHP&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Composer&lt;/code&gt;，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Composer&lt;/code&gt;来安装&lt;code class=&quot;highlighter-rouge&quot;&gt;Valet&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer global require laravel/valet
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-11-Jietu20180811-171418%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;valet install 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装和配置所需要的组件，并且注册开机启动。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-11-Jietu20180811-172924%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果安装成功，可以发现，&lt;code class=&quot;highlighter-rouge&quot;&gt;.test&lt;/code&gt;后缀的域名可以Ping通。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-11-Jietu20180811-173152%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用&quot;&gt;使用&lt;/h2&gt;
&lt;p&gt;使用简单是&lt;code class=&quot;highlighter-rouge&quot;&gt;Valet&lt;/code&gt;的最大的特色，进入我们Laravel项目所在的项目，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;valet link app-name&lt;/code&gt;来启动这个项目，然后用&lt;code class=&quot;highlighter-rouge&quot;&gt;valet links&lt;/code&gt;可以查看所有已经启动的项目，和关联的文件目录。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-11-Jietu20180811-174549%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问&lt;code class=&quot;highlighter-rouge&quot;&gt;la.test&lt;/code&gt;，可以发现这个项目已经成功部署了。如果想要取消关联此项目，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;valet unlink app-name&lt;/code&gt;即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-08-11-Jietu20180811-174832%402x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，&lt;code class=&quot;highlighter-rouge&quot;&gt;valet&lt;/code&gt;大大简化了我们配置一个项目的过程，尤其是&lt;code class=&quot;highlighter-rouge&quot;&gt;Nginx&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;PHP&lt;/code&gt;的配置，只需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;valet link&lt;/code&gt;即可完成替我们完成所有的配置项。但需要注意的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;Valet&lt;/code&gt;现在只支持特定的PHP框架，如果，你使用的框架不再下面的列表中，可以参见&lt;a href=&quot;https://laravel.com/docs/5.6/valet#custom-valet-drivers&quot;&gt;https://laravel.com/docs/5.6/valet#custom-valet-drivers&lt;/a&gt; 来进行自定义配置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Laravel&lt;/li&gt;
  &lt;li&gt;Lumen&lt;/li&gt;
  &lt;li&gt;Bedrock&lt;/li&gt;
  &lt;li&gt;CakePHP 3&lt;/li&gt;
  &lt;li&gt;Concrete5&lt;/li&gt;
  &lt;li&gt;Contao&lt;/li&gt;
  &lt;li&gt;Craft&lt;/li&gt;
  &lt;li&gt;Drupal&lt;/li&gt;
  &lt;li&gt;Jigsaw&lt;/li&gt;
  &lt;li&gt;Joomla&lt;/li&gt;
  &lt;li&gt;Katana&lt;/li&gt;
  &lt;li&gt;Kirby&lt;/li&gt;
  &lt;li&gt;Magento&lt;/li&gt;
  &lt;li&gt;OctoberCMS&lt;/li&gt;
  &lt;li&gt;Sculpin&lt;/li&gt;
  &lt;li&gt;Slim&lt;/li&gt;
  &lt;li&gt;Statamic&lt;/li&gt;
  &lt;li&gt;Static HTML&lt;/li&gt;
  &lt;li&gt;Symfony&lt;/li&gt;
  &lt;li&gt;WordPress&lt;/li&gt;
  &lt;li&gt;Zend&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://www.blue7wings.com/php%20tutorial/Better-Dev-Envirentment-Valet.html</link>
        <guid isPermaLink="true">http://www.blue7wings.com/php%20tutorial/Better-Dev-Envirentment-Valet.html</guid>
        
        <category>PHP</category>
        
        <category>开发环境</category>
        
        
        <category>PHP Tutorial</category>
        
      </item>
    
  </channel>
</rss>
