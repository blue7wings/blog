<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiamHsia's Blog</title>
    <description>A Simple Jekyll Blog Theme.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 08 Aug 2018 14:09:11 +0800</pubDate>
    <lastBuildDate>Wed, 08 Aug 2018 14:09:11 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Node.JS 创始人 Ryan Dahl 专访（一）</title>
        <description>&lt;p&gt;原文链接：&lt;a href=&quot;https://www.mappingthejourney.com/single-post/2017/08/31/episode-8-interview-with-ryan-dahl-creator-of-nodejs/&quot;&gt;Episode 8: Interview with Ryan Dahl, Creator of Node.js - Mapping The Journey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-26-image.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ryan现在是谷歌大脑的一名软件工程师，他是Node.js的作者，一个基于Chrome V8引擎的JavaScript的运行时环境。现在，他的工作方向是深度学习，主要专注于图像之间的转换，比如彩色化，提升像素，他在不同的项目都有所贡献，像 HTTP 解析器，libuv等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：大家好，欢迎大家踏上今天的采访之旅，当我们听到Node.js的时候，第一时间想到的就是Ryan Dahl。他向我们展示了一种全新的异步编程模型，以前我们所做的I/O可能都是完全是错的。今天我们请到的就是Ryan，一名黑客，卓越的编程者，Node的作者。我非常激动和荣幸Ryan能来参加今天的采访，欢迎你，Ryan。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：大家好，非常高兴能接受这个采访。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：我们都知你是Node的作者，你稍微说一说你在从事科技行业之前你的生活么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：当然，我是在圣地亚哥长大的，母亲在我6岁的时候买了一台Apple 2C电脑，这是我最早接触到的电脑。我现在36岁，换句话说，我的年龄和互联网的年龄一样大。我先是在圣地亚哥的社区大学读书，然后去了加利福尼亚大学圣地亚哥分校读数学，后来，在罗切斯特大学的研究生学院读数学。&lt;/p&gt;

&lt;p&gt;我在那里研究代数拓扑学，一门非常抽象的学科，刚开始的几年感觉这门学科非常优美，后来就渐渐的觉得无聊，因为实在是没有什么实际应用的场景。在研究生毕业之后，就顺其自然地读了Ph.D。在某一天，我突然意识到，我真的不想在我余生成为一名数学家，然后就退学了。然后，买了一张去美国南部的单程机票并在那呆了一年，在那里我依然保持着学生的刻苦学习，和Eric一起做一些网页开发，这也就是编程职业生涯的开端。那时候是为一家滑雪板公司做网页，基于ROR的网页开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：从Ph.D退学，去美国南部做网页开发一定是一次无比正确的经历吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是啊，我的意思是，从研究生学院出来，曾经解决都是非常抽象的问题，然而网页开发则是一种混合的过程，我还尝试把我在研究生学院学到的优雅的数学知识融入进去，这也是我非常喜欢用Ruby开发的原因吧，你可以用Ruby更好的表达的意图，这是非常有意思的，Rails框架在这方面就体现得很好，它发明了一种「模型，视图，控制器」架构，也许不是第一个，但是一定是Rails让这种架构流行起来的，数学的优雅和编程的应用，这两者的结合，真的非常吸引我。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：编写网页程序的确十分有趣，Ruby也是一个非常完美的工具。接下来，你在德国以自由工作者的方式接着工作，其中一个项目就是Node，为此你为Node连续工作了六到八个月？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是的，在从美国南部离开之后，便和女朋友搬到了德国，因为她是一个德国人，而且必须返回大学。就在从那开始，我开始参加那里的Ruby大会，在那里大家开始讨论这种MVC模型，其中有一个叫Chris Neukirchen的小伙伴，他开发了一个叫做Rack的项目，一个精简抽象的网页服务器程序，它将网页服务器集合到一个单函数接口中，接收到请求，你便可以返回一个响应。&lt;/p&gt;

&lt;p&gt;于此同时，我正在为一家公司做一些Nngix扩展的开发工作，在Nginx的世界中，所有的一切都是异步的，所以说，当你开发Nginx扩展的时候就必须特别小心拥塞的问题，这个时候，我开始思考如何把Chris的Rack项目和Nginx的非拥塞模型合并在一起呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：那时你就有些关于Rack和Nginx的想法了，那么你是如何说服你自己花费六个月的时间，实现一个能够运行在服务端端javascript框架，以此来提升性能的想法呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：这其中有两个部分，一个部分是简单的服务器接口，Rack，另一个是完全异步的部分就是Nginx，我开始思考这两者，就在这个时候，Chrome在2008年的12月发布，同时发布的还有V8引擎，我开始在这个V8引擎中摸索，它看起来如此让人着迷，简洁，高效，此时我突然明白，javascript就是单线程，但所有处理都是非阻塞的。&lt;/p&gt;

&lt;p&gt;这让我觉得有点匪夷所思，但是网页浏览器的确所有请求都是非阻塞的啊，无论是AJAX请求还是其他，然后我就在想如果javascript加上异步IO加上一些HTTP服务器的内容，一定会是一件非常酷的事情，对于这个想法我非常兴奋，并坚持不懈的为此工作了四年。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：的确是这样，Javascript加上异步IO起到了非常好的效果，我想开发者们都在寻找一种如此实现的框架。在那段困惑的事情，有没有人给你一些建议呢？还是就仅仅是你一个人？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：就仅仅是我一个，编程界的一些朋友也给了我一点建议，但最初的工作就仅仅是我在家里编写出来的，后来，搬到旧金山，见了一些编程界大牛，这些人给了很多的想法也为后来的Node作出了很大的贡献。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：从你2009年以来开始开发Node，在这段时间，你的心路历程是怎样的呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：我认为至少对我来说，在我人生中，没有比那时更加棒了。Node就是那个等着我去做并且不得不做事情。也许其他人也有此类的想法，但是我能够实现的的原因，主要得益于我的自由工作，这使我有大量的自由时间，可以连续不停地好几个月为之编写代码，这也是一个项目的初始版本所必要的条件，无论怎么说，这段经历非常棒，也非常有意思。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：这真是非常美妙的经历，你做的非常棒。Node是基于「完全异步」的模型的，你为这个想法做了哪些工作呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：这也是个非常有趣的问题，我现在已经好几年没有为Node编写任何代码了，当Node刚诞生的时候，我到处去演讲，希望可以说服更多的人，让他们相信以前我们所做的I/O操作可能都是错的，我们可以用异步的方式来操作所有的事情，这也能解决编程方面上很多的难题。比如，即使是在单进程的情况下，通过异步也能处理非常大流量的请求，在那段时光里，我是强烈相信这个理念的，但是在后来的几年里，我 也意识到异步不是编程最终解决方案，而是仅仅是个开始，尤其是，当Go语言诞生以后。&lt;/p&gt;

&lt;p&gt;Go语言诞生已经有很长一段时间了，我是大约2012年才第一次接触到Go，Go语言拥有非常漂亮的运行时环境，还有特别健康的线程管理，非常便于使用。&lt;/p&gt;

&lt;p&gt;Go语言给编程人员所提供的接口看似是堵塞的，其实不然，这真的是非常好的一种编程模型。在很多情况下，同步的编程方式是更要简单的，不必关心各种回调的嵌套问题，在Node中，想要实现就困单得多，你不得不在回调函数中去使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：我也非常喜欢Go的编程模型，使用goroutine真的非常简单和充满乐趣，现实中，我们就是用Go来搭建分布式应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：Go语言对应用级开发真的是合适，如果你要是构建服务层的应用，真的没有比Go更加合适的了。也就是说，我认为Node的非堵塞编程模型在javascript上表现得不错，因为不需要考虑线程的问题，但是回调地狱真的让人头疼，你不得不不停的在回调函数中做处理，但随着async关键词的出现，在javascript也能进行同步的操作了。&lt;/p&gt;

&lt;p&gt;我认为Node绝对不是构建大型网页服务的最好选择，我会用Go而不是Node，讲真的，这也是我离开Node的原因。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：选择正确的工具对开发者来说真的是非常重要，你现在对Node真的没有一点偏袒。当你在2009年柏林的JsConf上，向开发者介绍了Node.js，当时你对这些突如其来的成功感到惊喜么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：是的，我四年都在这种连续不断的惊喜中，Node成长得非常快，越来越多的人喜欢Node。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主持人&lt;/strong&gt;：后来，你加入了Joyant公司，并在那里全职为Node工作，然后搬到了旧金山对吧？这段经历是怎么样的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ryan&lt;/strong&gt;：在这段人生经历中，我感到大家以我为中心，无论是在各种开发者大会中，还是其他地方。有一次，我去了日本，大家都来找我合影，我就感觉怪怪的。在线上也是同样的情况，无论什么时候发表什么评论，大概都会有100多个人的回复。&lt;/p&gt;

&lt;p&gt;所以，我不得不谨慎地选择自己的措辞，因为很多人在关注你，这实在是太奇怪了！我非常不喜欢这种感觉，作为一个程序员，我只想写点代码，不必顾虑太多就能分享自己的观点，所以这种感觉让我不是特别喜欢。&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%91%E6%96%87/Node.JS-20-E5-88-9B-E5-A7-8B-E4-BA-BA-20Ryan-20Dahl-20-E4-B8-93-E8-AE-BF-EF-BC-88-E4-B8-80-EF-BC-89.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%91%E6%96%87/Node.JS-20-E5-88-9B-E5-A7-8B-E4-BA-BA-20Ryan-20Dahl-20-E4-B8-93-E8-AE-BF-EF-BC-88-E4-B8-80-EF-BC-89.html</guid>
        
        
        <category>译文</category>
        
      </item>
    
      <item>
        <title>Swoole如何实现热加载(autoload)</title>
        <description>&lt;p&gt;Swoole的确是一款非常优秀的PHP框架，在性能上给予了PHP质的飞跃，在将部分业务逻辑嫁接到Swoole上之后，性能就提升了将近4倍，这还仅仅是没有使用异步等操作的情况下，如果有兴趣，可以查看&lt;a href=&quot;https://www.youtube.com/watch?v=IKF5IdBPlWY&quot;&gt;对比视频&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-13-%E6%88%AA%E5%9B%BE%202018-06-13%2016%E6%97%B609%E5%88%8622%E7%A7%92.png&quot; alt=&quot;&quot; /&gt;
但是Swoole现有的文档非常之匮乏，你可以把现有的文档看成API文档，而不是面向新手的教程，在使用Swoole的过程中，遇到的第一个问题，Swoole如何才能热加载呢？每次修改完代码还需要关闭服务然后重启，才能让新的文件加载进去，非常之不友好，在接下来的的内容中，便会解决这个问题。&lt;/p&gt;

&lt;h2 id=&quot;swoole的加载机制&quot;&gt;Swoole的加载机制&lt;/h2&gt;
&lt;p&gt;Swoole性能之所以如此优秀，很大原因是改变了以往每次请求便加载一遍文件的模式，而改成在服务器启动的时候统一加载所有的文件，在每次请求的时候不会进行再次加载和初始化，从而大大减少了请求的消耗。如果你已经了解一点Swoole的实现，可以知道Swoole在启动的时候，Manager进程会创建N个Worker进程来接受/发送数据，实现业务逻辑，当Worker进程因为致命错误而关闭，Manager进程会重新创建，便会重新加载文件。&lt;/p&gt;

&lt;h2 id=&quot;热加载实现&quot;&gt;热加载实现&lt;/h2&gt;
&lt;p&gt;在实现热加载之前我们先看一看代码，主文件&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;，加载的文件&lt;code class=&quot;highlighter-rouge&quot;&gt;greet.php&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'greet.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;请注意&lt;code class=&quot;highlighter-rouge&quot;&gt; include_once 'greet.php';&lt;/code&gt;这句并没有像我们以前写PHP代码放在文件的第一句，而是放在&lt;code class=&quot;highlighter-rouge&quot;&gt;$http-&amp;gt;on()&lt;/code&gt;的回调函数中，这是因为Worker进程因为致命错误而重启，但是Manager进程可不会，如果放在代码第一行，就表示只有Manager进程重启才会生效，这显然不是我们需要的。&lt;/p&gt;

&lt;p&gt;知道上面的加载机制，我们就可以想办法让Worker进程重启。&lt;/p&gt;

&lt;h3 id=&quot;方法一&quot;&gt;方法一&lt;/h3&gt;
&lt;p&gt;向Master进程发送&lt;code class=&quot;highlighter-rouge&quot;&gt;USR1信号&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;USR1信号&lt;/code&gt;通过Manager进程转发给Worker进程，Worker进程便会重启，我们如下实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kill -USR1 master_pid 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;查看Swoole的进程信息：
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-13-%E6%88%AA%E5%9B%BE%202018-06-13%2017%E6%97%B607%E5%88%8629%E7%A7%92.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;30322&lt;/code&gt;便是我们的主进程ID，&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -USR1 30322&lt;/code&gt; Woker进程会关闭，并被Manager重启，通过下面的图可以看到，Worker进程已经改变，但主进程进程却没有任何变化。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-06-13-%E6%88%AA%E5%9B%BE%202018-06-13%2017%E6%97%B610%E5%88%8604%E7%A7%92.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每次在&lt;code class=&quot;highlighter-rouge&quot;&gt;greet.php&lt;/code&gt;中修改完代码，用&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -USR1 30322&lt;/code&gt; 重启Worker进程，代码便会重新加载进去。这种方法缺陷也很明显，需要手动去给主进程发送信号，如果想要实现监听文件改动，自动发送信号，还需要继续编写代码，倒是有点得不偿失了。&lt;/p&gt;

&lt;h3 id=&quot;方法二&quot;&gt;方法二&lt;/h3&gt;
&lt;p&gt;可以同配置&lt;code class=&quot;highlighter-rouge&quot;&gt;max_request&lt;/code&gt;来控制Worker进程的最大任务数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个Worker进程在处理完超过此数值的任务后将自动退出，进程退出后会释放所有内存和资源。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这也变向地实现了Worker进程的自动重启，给&lt;code class=&quot;highlighter-rouge&quot;&gt;max_request&lt;/code&gt;设置值为1，也就是说当一次请求之后，Worker进程便会重启。&lt;/p&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;如下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swoole\Http\Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'max_request'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'greet.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;greet.php&lt;/code&gt;的内容，重新刷新页面，内容已经改变，我们的热加载功能也实现了。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.catplanet.me/?id=10&quot;&gt;Swoole编程指南-2.6 热加载&lt;/a&gt;
&lt;a href=&quot;https://wiki.swoole.com/wiki/page/300.html&quot;&gt;max_request&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/swoole/Swoole-Autoload.html</link>
        <guid isPermaLink="true">http://localhost:4000/swoole/Swoole-Autoload.html</guid>
        
        
        <category>Swoole</category>
        
      </item>
    
      <item>
        <title>一种极简的的生活方式</title>
        <description>&lt;p&gt;原文：&lt;a href=&quot;https://medium.com/s/story/a-minimalist-lifestyle-6c2872c28473&quot;&gt;https://medium.com/s/story/a-minimalist-lifestyle-6c2872c28473&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;极简的生活方式对每个人来说可能都是不同的，对于我而言，这种生活方式帮我在两年付清了42000美元的学生贷款，让我的重心回归我喜欢的事物，并且使我的生活重回正轨，在过去的六个月中，我感到非常的幸福，身心健康，还有内心的平静。&lt;/p&gt;

&lt;p&gt;但是，我无法保证在我生活中使用的具体的方式同样对你有效，但愿这些方法能够给你的生活带来一点指导。&lt;/p&gt;

&lt;h2 id=&quot;缩减你身边的东西&quot;&gt;缩减你身边的东西&lt;/h2&gt;

&lt;p&gt;就我而言，我通过各种非盈利机构捐掉了身边几乎70%的衣服，我逐渐意识到那些衣服一个月也穿不了几次，如果不喜欢，便不再保留它们，为了减少这些无用的东西，每过一个月我就会重新检查一遍衣橱。&lt;/p&gt;

&lt;p&gt;我同样也会渐渐的捐掉鞋子，包，书，马克杯，电子产品，甚至是一些工艺品。我想我可能会后悔，事实上，当捐掉这些东西之后的一段时间里，我甚至都忘了有这回事。我们生活中所需要的东西，其实并没有想象中的那么多。当然了，我仍然会保留着一些特殊意义的东西（比如，女朋友送给我的每张卡片，积少成多，现在也很可观了），这些东西，我也不在意它们多占用一点空间:)&lt;/p&gt;

&lt;p&gt;如果你和我一样生活在一个逼仄的房间里（合租的房子里有狗，兔子，但自己只有一间卧室），学会丢掉房间里从来没有用过和完全没有价值的东西来争取一点空间。&lt;/p&gt;

&lt;h2 id=&quot;关掉手机的所有通知&quot;&gt;关掉手机的所有通知&lt;/h2&gt;

&lt;p&gt;我手机上唯一的通知就是接收短信，通常还是女朋友给我发的，我相当确定我对她而言还是非常重要人，至于，邮件，新闻，社交网络，或者其他辅助性质的软件，统统关掉，并且不允许后台刷新。&lt;/p&gt;

&lt;p&gt;事实上，删掉手机上的社交软件对你并没有什么影响，几周前，我从手机上删掉了Twitter，Medium，Quora，Twitch，终于意识到我被这些操控着，很多人无论在哪都抱着手机，地铁上，电梯上，甚至是在走路，就是为了逃避短暂的无聊，我想更加无拘无束一点，最终，我也做到了。&lt;/p&gt;

&lt;p&gt;我还是保留着Instagram，不是不想删掉，而是没办法再网页上长传图片，除此之外，手机上基本上没什么软件了，只剩下，短信，播客，和笔记，仅此而已。没了手机的束缚，我更加积极，把注意力更多的放在这个多彩的世界上。最棒的是，当我用电脑浏览社交网络的时候，其实也完全没有落下什么内容嘛。&lt;/p&gt;

&lt;h2 id=&quot;选择简单健康的食物&quot;&gt;选择简单健康的食物&lt;/h2&gt;

&lt;p&gt;在每周我都会选择作一些简单健康的食物，煎三个鸡蛋，应付早饭，中午就是素食炒菜，晚饭一些沙拉就好，可能这些食物略显乏味，对我而言，每餐只要简单，有营养，够饱就好。想要健康的饮食的起点也不是那么高，在此之前，我的哲学都是，吃得相对健康一点，偶尔放纵一下自己，来点没那么多营养的小点心其实也挺好。保持食物的简单，去超市的次数也多了，不用一次买那么多一次吃不完的失误，准备食物的时间也越来越少，在饮食方面的生活开支也大大减少。&lt;/p&gt;

&lt;h2 id=&quot;除非特别喜欢纸质书在kindle上买电子书&quot;&gt;除非特别喜欢纸质书，在Kindle上买电子书&lt;/h2&gt;

&lt;p&gt;立志成为一个作家的我，把阅读看做一种使命。我每个月能看完四本书，为了保证自己卧室的整洁有序，减少杂乱，我只从图书馆借书，或者在Kindle上买书，把iPad丢进工作包，在通勤的时候便可以阅读。&lt;/p&gt;

&lt;h2 id=&quot;简化你的消费&quot;&gt;简化你的消费&lt;/h2&gt;

&lt;p&gt;极简的生活对我最大的影响便是改变了我高消费的习惯，曾经和大多数人一样，买东西都是用信用卡，现在我会估算每个月最低的消费，把这些钱放进借记卡里，从那里面进行消费。&lt;/p&gt;

&lt;p&gt;现在我制作&lt;a href=&quot;https://jennifertchan.net/blog/a-step-by-step-guide-on-how-to-make-the-perfect-budget&quot;&gt;一个简单的消费管理系统&lt;/a&gt; ，这使我在两年多的时间里减少了80%的消费，这个系统包括制定预算，建立紧急储备金，投资低息基金，我也会用现金和信用卡支付一些日常花销。&lt;/p&gt;

&lt;p&gt;我不仅会刻意的控制消费，还会预估一些生活中可能的麻烦而带来的经济焦虑，培养少买东西和自我投资（比如，书本）的意识，这会让你深深意识到其实自己已经很充实了。&lt;/p&gt;

&lt;h2 id=&quot;极简的生活方式是一场永无止境的人生之旅&quot;&gt;极简的生活方式是一场永无止境的人生之旅。&lt;/h2&gt;

&lt;p&gt;我接触过很多种方式来减少房间的杂乱，极简并不是你拥有什么东西，而是减少生活中无用的东西，以此来给那些对你真正有用的东西腾出空间，这便是少即是多的艺术。&lt;/p&gt;

&lt;p&gt;极简主义被很多精英人士奉为圭臬，对于那些低收入的穷人来说，好像并不能很好的运用到生活中，但在我对极简的定义并非如此，这不是白墙靠着昂贵精致的衣橱，摆放它们以达到极简的美感。&lt;/p&gt;

&lt;p&gt;对我来说，极简主义始终都是内心的改变，愈发聒噪世界里的安定，我猪脑袋里面闪过千万个想法的宁静，允许自己放慢步调的生活方式。&lt;/p&gt;

&lt;p&gt;通过减少作抉择，可以避免精神的消耗，建立简单的生活系统，比如饮食，金钱，我能够更加专注真正在意的东西：健康，工作还有我爱的人，自从这种转变，我变得更加幸福，冷静，还有更加不受束缚。&lt;/p&gt;

&lt;p&gt;正如极简主义者Joshua Fields Millburn和Ryan Nicodemus所指出的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;每个人都有自己的极简方式，但每个方式都通向了同一个地方：拥有更多时间，金钱，自由，和意义非凡的生活。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果极简的生活方式仍然不适合你，我倒也是可以理解，没有一种生活方式，生活哲学是适合所有人的，但这些大量极简生活方式中的理念可以变通为我们所用。&lt;/p&gt;

&lt;p&gt;对于我，简单生活的确是非常有效的，它让我在混乱生活环境保持冷静，高压的工作环境中保持理智，最重要的是，它让我能够以正确的角度看待日常的问题。&lt;/p&gt;

&lt;p&gt;我仍然不能说采用极简的生活方式能够解决我所有的问题，但可以自信的说，它使我的生活，无论是在私人还是工作层面上，都变得更加从容不迫。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;读完这篇文章之后，对我颇有启发，便把翻译成中文，希望能多的人能够有所感悟，全文有部分删节，总觉得原封不动翻译过来，做为亚洲人，读起来怪怪的，所以在保证不改变原意的情况下，做了部分删减和改动，当然能够阅读原文是最好的，原文链接放在了文章的最开头。&lt;/p&gt;

&lt;p&gt;回头说一说极简的生活方式，诚如作者所说的那样，这不是一种精致主义对美的追求，而是内心的改变，少即是多的生活哲学，这不是说，让我们减少欲望，让我们成为「佛系」青年，而是一种克制，无穷无尽的欲望是痛苦的根源，收拾房间，将那些根本用不到或者对我们没有任何意义的东西清理出去，给最需的东西让出地方，生活也是相同的道理，克己复礼为仁。&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%91%E6%96%87/Translate-A-Minimalist-Lifestyle.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%91%E6%96%87/Translate-A-Minimalist-Lifestyle.html</guid>
        
        
        <category>译文</category>
        
      </item>
    
      <item>
        <title>MySQL UNION用法</title>
        <description>&lt;p&gt;原文地址：&lt;a href=&quot;http://www.mysqltutorial.org/sql-union-mysql.aspx&quot;&gt;MySQL UNION&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在此教程中，你将会学到如何用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;操作符来合并两个甚至多个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;的查询结果至一个结果集中。&lt;/p&gt;

&lt;h2 id=&quot;用法&quot;&gt;用法&lt;/h2&gt;
&lt;p&gt;在MySQL数据库中，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;操作符允许你合并多个查询结果集，下面是&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;操作符的语法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT column_list
UNION [DISTINCT | ALL]
SELECT column_list
UNION [DISTINCT | ALL]
SELECT column_list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;想要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN&lt;/code&gt;合并多个查询结果集，下面是必须遵守的规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;查询的列的个数必须是相同的，比如：第一个查询有两列，第二个必须也是两列。&lt;/li&gt;
  &lt;li&gt;列的数据类型必须是相同的，或者是可以相互转换的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;运算符会删除重复的数据，因为缺省默认是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt;，但你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN ALL&lt;/code&gt;来解决这个问题。&lt;/p&gt;

&lt;p&gt;好了，让我们看看下面的例子，表：&lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
 
CREATE TABLE t1 (
    id INT PRIMARY KEY
);
 
CREATE TABLE t2 (
    id INT PRIMARY KEY
);
 
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (2),(3),(4);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;就会合并从&lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt;中取得的数据：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT id
FROM t1
UNION
SELECT id
FROM t2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但最终的结果是去重的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
+----+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN&lt;/code&gt;去掉了&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;，只会保留一个有效的值，诚如上面所说的，你可以加上&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION ALL&lt;/code&gt;来避免。&lt;/p&gt;

&lt;p&gt;可能下面的韦恩图能更好的解释整个操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION ALL&lt;/code&gt;，重复的数据便会保留下来，由于不处理重复数据，它的速度会比&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN DISTINCT&lt;/code&gt;快很多。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT id
FROM t1
UNION ALL
SELECT id
FROM t2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
|  2 |
|  3 |
|  4 |
+----+
6 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到了吧，在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN ALL&lt;/code&gt;语句之后，重复的数据又重新回来了。&lt;/p&gt;

&lt;h2 id=&quot;unioin-vs-join&quot;&gt;UNIOIN vs. JOIN&lt;/h2&gt;
&lt;p&gt;同样的联合两张表的数据，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;又有什么区别呢？简单的说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;是垂直合并，而&lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;是水平合并&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-vs-JOIN.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;列别名&quot;&gt;列别名&lt;/h2&gt;
&lt;p&gt;我们下面使用&lt;code class=&quot;highlighter-rouge&quot;&gt;customers&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;employees&lt;/code&gt;这两张表来做演示，表结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-employees_table.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-customers_table.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假如你想要查询出雇员和顾客的名字，并且合并姓和名到一个结果集中，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIOIN&lt;/code&gt;此时便可以很好的解决。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    firstName, 
    lastName
FROM
    employees 
UNION 
SELECT 
    contactFirstName, 
    contactLastName
FROM
    customers;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正如你所见，&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;会使用第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句的列名作为输出的名字，如果你想使用自己的别名，也很简单，在第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句中设置即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    concat(firstName,' ',lastName) fullname
FROM
    employees 
UNION SELECT 
    concat(contactFirstName,' ',contactLastName)
FROM
    customers;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新的结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-with-column-alias-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;对结果排序&quot;&gt;对结果排序&lt;/h2&gt;
&lt;p&gt;在最后一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句之后，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;便可以对整个得到的结果集进行排序。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    concat(firstName,' ',lastName) fullname
FROM
    employees 
UNION SELECT 
    concat(contactFirstName,' ',contactLastName)
FROM
    customers
ORDER BY fullname;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-28-MySQL-UNION-and-ORDER-BY-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要我们注意的是，如果你在每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句之后都加上&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;并不会影响最后一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;语句之后的&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;，所以说，只有最后一个才是有效的。&lt;/p&gt;

&lt;p&gt;MySQL同样支持通过数据集所在位置排序的功能，如下使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 
    concat(firstName,' ',lastName) fullname
FROM
    employees 
UNION SELECT 
    concat(contactFirstName,' ',contactLastName)
FROM
    customers
ORDER BY 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过这个教程，你一定学会和如何用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;指令来合并多个查询语句的结果.&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;

</description>
        <pubDate>Wed, 28 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tutorial/MySQL-Union-Tutorial.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/MySQL-Union-Tutorial.html</guid>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>Xcode 安装 vim 插件</title>
        <description>&lt;h1 id=&quot;xcode-安装-vim-插件&quot;&gt;Xcode 安装 Vim 插件&lt;/h1&gt;
&lt;p&gt;Xcode 没有自带Vim模式，我们需要安装第三方插件，来实现此功能。该文章基本翻译自该插件的文档，插件的地址：https://github.com/XVimProject/XVim2&lt;/p&gt;

&lt;h2 id=&quot;系统要求&quot;&gt;系统要求&lt;/h2&gt;
&lt;p&gt;该插件满足Xcode 9 ，如果你使用的是9以下的版本，请访问&lt;a href=&quot;https://github.com/XVimProject/XVim&quot;&gt;GitHub - XVimProject/XVim: Xcode plugin for Vim keybindings&lt;/a&gt;，下面是我的系统配置的相关信息，仅供参考。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MacOS版本： 10.13.3 (17D102)&lt;/li&gt;
  &lt;li&gt;Xcode版本： 9.2 (9C40b)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;重新对xcode进行签名&quot;&gt;重新对Xcode进行签名&lt;/h2&gt;
&lt;p&gt;Xcode 8以上就已经不再支持第三方插件，我们需要重新对Xcode进行重新签名来实现。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;关闭Xcode&lt;/li&gt;
  &lt;li&gt;准备代码签名证书
    &lt;ul&gt;
      &lt;li&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;钥匙串&lt;/code&gt;选择&lt;code class=&quot;highlighter-rouge&quot;&gt;登录&lt;/code&gt;选项，在菜单栏选择&lt;code class=&quot;highlighter-rouge&quot;&gt;证书助手&lt;/code&gt;，创建证书
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-Keychain1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;在弹出的创建窗口中，输入&lt;code class=&quot;highlighter-rouge&quot;&gt;XcodeSigner&lt;/code&gt;，证书类型选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Code Signing&lt;/code&gt;，然后点击创建。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-Keychain2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;对Xcode进行重新签名
打开命令行，输入如下代码：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo codesign -f -s XcodeSigner /Applications/Xcode.app&lt;/code&gt;
等待重新签名完成，这可能需要很长一段时间，不要以为是程序卡住而关闭命令行程序。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;安装插件&quot;&gt;安装插件&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载插件的源码
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/XVimProject/XVim2.git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;确认 &lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select&lt;/code&gt;是指向Xcode
在命令行中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select -p&lt;/code&gt;，会返回&lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Xcode.app/Contents/Developer&lt;/code&gt;，如果没有显示该路径，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select -s&lt;/code&gt;命令进行设置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进入插件源码目录，进行编译。
在源码目录下，一条&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;命令即可，稍作等待，编译完成。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-build-succeeded.png&quot; alt=&quot;&quot; /&gt;
出现如下&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Succeeded&lt;/code&gt;的编译信息即表示已经编译成功，如果出现&lt;code class=&quot;highlighter-rouge&quot;&gt;XVim hasn't confirmed the compatibility with your Xcode, Version X.X
Do you want to compile XVim with support Xcode Version X.X at your own risk?&lt;/code&gt;的提示信息，请输入&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;来确认。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新打开Xcode，会提示是否加载&lt;code class=&quot;highlighter-rouge&quot;&gt;XVim&lt;/code&gt;插件，点击&lt;code class=&quot;highlighter-rouge&quot;&gt;是&lt;/code&gt;即可。如果，错误点击了&lt;code class=&quot;highlighter-rouge&quot;&gt;否&lt;/code&gt;则无法加载插件，此时需要卸载该插件，在终端中输入如下命令：
&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults delete  com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcode-X.X&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;X.X&lt;/code&gt;是你的Xcode版本号，在Xcode的菜单栏，点击&lt;code class=&quot;highlighter-rouge&quot;&gt;关于Xcode&lt;/code&gt;即可看到。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/2018-03-06-xcode-version.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;卸载XVim
如果想要卸载该插件，进入该源码目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;make uninstall&lt;/code&gt;即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;捐助--其他&quot;&gt;捐助 &amp;amp; 其他&lt;/h2&gt;
&lt;p&gt;如果你觉得这个插件非常有用，可以为作者进行捐助，捐助地址是：&lt;a href=&quot;https://www.bountysource.com/teams/xvim&quot;&gt;Bountysource&lt;/a&gt;，想要了解更多相关信息，可以访问该项目Github主页，&lt;a href=&quot;https://github.com/XVimProject/XVim2&quot;&gt;XVim&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tutorial/Xcode-Use-Vim-Mode.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/Xcode-Use-Vim-Mode.html</guid>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>从美国建国史去谈民主的认知</title>
        <description>&lt;p&gt;读完了「美国史」的三卷中的第一卷的内容，从发现新大陆开始，一直讲到美国建国后政治，经济，文化的发展，可以说第一卷就是美国的建国史，说一说这部分内容，以及从这段曲折并波澜壮阔的历史中看到的民主的认知，权当读书的笔记。&lt;/p&gt;

&lt;p&gt;以前总调侃美国历史短，短到都没有中国同仁堂的历史长，同仁堂建立于清康熙八年（1669年），1776年，第二次大陆会议通过「独立宣言」，美国才算是真正的建国，从这种角度上来说美国的确是非常年轻的一个国家，当然，我们不能从印第安人时代就当做美国的历史，只能算作北美洲历史，就好像不能从历史的角度去区分北京人一样，你祖先是北京人，我祖先还是山顶人洞呢。&lt;/p&gt;

&lt;p&gt;美国为何在建国之初就能建立完善，自由，民主的政治制度？不可否认，这是站在英国政治制度的肩膀上，早在1216年的英国（中国宋朝）就通过了「自由大宪章」来限制君主权利，形成了完整的君主立宪制度，随之而来的1295年形成议会的雏形，到了1620年第一批清教徒登上五月花号驶向美洲大陆，民主早已深入人心，五月花号在充满凶险的茫茫大海，生死未卜的情况下，所有人却一致通过了「五月花号公约」，公约规定所有人组成「公民政体」，遵循少数服从多数的原则，从这点看来，建国即建立民主的制度就一点都不奇怪了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/kiuvL&quot; alt=&quot;五月花号公约起草&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随着不断移民从英国，法国等国家来到美洲大陆，在此安身立命，他们来自不同的国家，受到迫害到达美洲，便以这片崭新的土地为自己的国家。就像成年的孩子要脱离父母的家庭一样，美国这个茁壮成长的青年，也渴望脱离英国这个「家庭」束缚，英国殖民者和美洲大陆的人民矛盾越来越深，不断增加的赋税，暴力统治，最后在克莱星顿打响了反抗英国殖民者的第一枪，和中国抗日战争颇为相似的是，美洲人民面对全副武装的英军，和中国人民面对日军一样，正面冲突毫无胜算可能，只能采取防守之势，而英军和日军作为攻击方，只想快速赢下战争，不料战线越拖约长，深陷战争的泥淖中无法自拔，最终经济被拖垮，在1782年签订了「巴黎合约」，英军投降，美洲大陆正式从殖民者的统治下独立。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/b8JlW&quot; alt=&quot;华盛顿横渡特拉华河，战争走向尾声&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无论是政治革命还是残酷的战争，往往都会带来社会的巨大变革，独立之后的美国社会，平等的精神更加深入人心，这场战争是每个人冒着生命的危险而赢下的，理所应该所有人应当平等分享这个国家的胜利，一位老绅士在回忆中说道：「农民走进来，随地吐痰，随随便说地脱下满是泥巴的靴子，丝毫不顾在场其他人的感受，独立精神已经被转化为平等精神，每一位携带武器的人都认为自己与其邻居的社会地位相等，毫无疑问，每个人都觉得自己在所有方面与我平等了」。随之而来的1787年在费城召开的制宪会议，这种平等的精神便以法律条文的方式被写进宪法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/tlED4&quot; alt=&quot;费城制宪会议&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每一次变革都是非民主国家迈向民主共和的好机会，美国独立战争，法国大革命，日本明治维新，中国戊戌变法等等，没有迈出这一步，亦或是没有成功的，这个机会就错过了，只能去等着下一次的到来。「民主谁也挡不住，你要么开门让它进来；要么看着它破门而入。这只是一个时间问题」，这是历史的潮流，是没有办法去阻挡的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/8QGBC&quot; alt=&quot;戈尔巴乔夫宣布苏联解体&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对犬儒主义的人来说，民主这东西好像有和没有没什么区别嘛，不是照样可以看剧，过日子。对于此种说法，我是持强烈反对的意见的，在没有民主的国度里，所有的一切都好像是统治阶级的施舍，能够稳定过完一生的前提，是你不会遇到任何不公平的对待，如果不幸遇到，发声就很难很难了，因为你没法争取到普罗大众没有，而统治阶级独有的东西，这被现在流行语称之为阶级固化。&lt;/p&gt;

&lt;p&gt;对待民主应该和对待未知事物态度一样，首先一定要谦逊和求知，而不是先入为主的鄙夷，「你看，一民主就容易乱，我宁愿这样」，此种态度是切不可取的。我喜欢美国制宪会议起到推动作用的汉密尔顿，形容开国之父们的一句话作为本文结尾：&lt;/p&gt;

&lt;p&gt;「对于未知的什么我都野心勃勃，我承认这是我的弱点」&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E7%AC%94/The-History-of-America-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E7%AC%94/The-History-of-America-1.html</guid>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>2017年总结</title>
        <description>&lt;p&gt;在我上大学的时候，看过一段文字并且以此为信条，「你25岁之前可以随便的选择方向，而不用去担心你的未来，之后就需要慎之又慎」，转眼之间，就到了人生这个节点，人生可真是奇妙，2017年整个一年好像就是印证这句话而来的，17年年初，放弃了现有的工作，去「随便选择」看似很好的道路，但后来发现，从事你不爱的工作就像和你不爱的人在一起一样，貌合神离，身心俱疲。勉勉强强到了7月中旬，我决定摆脱这一切，只身前往上海工作，这后半年，和小伙伴一起工作，真的让我感到幸福和快乐。「重新认识自己」应该是我17年的关键字，走错了路并且修正自己，是我今年最大的收获。&lt;/p&gt;

&lt;p&gt;对于新的一年，我则没有太多希冀的，历史读了一点，总会有一种时间和命运的虚无感，个人的努力在命运中起多大作用呢？崇祯吊死在煤山，是不努力么？非亡国之君当亡国之运尔，时间就像一条大河，每个人就像河中的沙子，行至宽处，可能波涛汹涌，行至窄处，涓涓细流，个人的努力只能让自己在河中而不在岸上，至于是不是能汹涌澎湃，就很难很难说了，也许以后的每年，我都会写到「今年好像和去年没差多少嘛」，这也没有多少可以抱怨自己不够努力的，兴许是自己这一辈子都是涓涓细流，时间能够裹挟着我一路向前，细流也好，波涛也罢，我都十分满足了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/07NfK&quot; alt=&quot;Carpe Diem&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E7%AC%94/2017-Summery.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E7%AC%94/2017-Summery.html</guid>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>道</title>
        <description>&lt;p&gt;「史记·孔子世家」记录孔子这么一件故事，孔子推广自己的理念，却四处碰壁，他见弟子各个都面露愠色，便提出了一个问题「诗云：匪兕匪虎，率彼旷野，吾道非邪？ 吾何为于此？」，大意是，我们既不是犀牛也不是老虎，却在在这荒野疲于奔命，使我们选择的道路错了么？为什么会流落成这样的境地呢？问完子路后，又对子贡抛出了这个问题，子贡曰：「夫子之道至大也，故天下莫能容夫子。夫子盖少贬焉？」(夫子的理念实在是太宏大了，所以普天之下没有能容得下夫子的，夫子能不能放低点标准呢？)。孔子曰：「赐，良农能稼而不能为穑，良工能巧而不能为顺。君子能修其道，纲而纪之，统而理之，而不能为容。今尔不修尔道而求为容。赐，而志不远矣！」(赐啊，良农播种却不求好收成，良工能擅长工艺却求每个人都用得顺心，君子能够明白自己的道，用法度规范国家，用道统来治理臣民，但不能保证被虽有人所包容。如今你不修明你的道，却一味求被包容，赐，你的志向真的太小了)&lt;/p&gt;

&lt;p&gt;「道」这个词真的很难解释，包容的东西真的是太多了，可以是你的理想，也可以是你的操守，总之是安身立命的，不容改变的东西，诚如孔子批评子贡所说的，你不能去坚守自己的安身立命之道，却放低标准让别人去包容你，这样的志向可真是太小了啊。这话放在几千年后的今天也是非常受用的，就像我们在职场，生活中，不被包容是非常正常的事情，在办公室有办公室政治，在科室有勾心斗角之类，我们应该羡慕那些圆滑，精于世故的人却毫无能力的人么？当然不是，其志不远矣。坚守自己的道，作为工程师，就去磨炼自己的技能，写出稳健的代码，作为医生，就增长自己的能力，做好每次手术，这才是我们应该追求的。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E7%AC%94/%E9%81%93.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E7%AC%94/%E9%81%93.html</guid>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>更好的PHP开发环境-Docker篇</title>
        <description>&lt;p&gt;如果你看了Vagrant篇的内容，可能会想「我也不像做第一个装开发环境的人，把别人的镜像拿过来用就好了」，恭喜你，偷懒使人成长，你已经有成为开发大师的思路了，但是只不过有人稍早实现了你的idea，而且稍作改进成了现在的Docker，所以呐，有想法就去实现吧，不然就让别人占了先机咯（:&lt;/p&gt;

&lt;p&gt;如果说Vagrant是将整个操作系统虚拟化，然后打包成镜像，分发使用，那么我们就可以把Docker简单理解为粒度更细的Vagrant，Docker可以将例如PHP，Nginx，MySQL这类服务打包成镜像，然后我们可以像拼积木一样组合他们，来实现我们想要的架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/wiC0h&quot; alt=&quot;架构图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装docker&quot;&gt;安装Docker&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.docker.com/&quot;&gt;官方网站&lt;/a&gt;直接下载符合你操作系统的版本，安装即可。由于国内的网络下载Docker镜像实在是太慢，我们不妨使用国内的加速服务，教程可以参见：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;/h2&gt;
&lt;p&gt;如果你还没有来得及看Docker的文档，当然也没关系，我们通过第一个服务，Nginx的搭建来边做边学。&lt;/p&gt;

&lt;p&gt;首先，我们先拉取一个Nginx镜像，很简单：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker pull nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt;查看一下我们刚刚拉取下来的镜像：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/VCBia&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实例化&lt;/strong&gt;该镜像，我们把&lt;strong&gt;实例化&lt;/strong&gt;的镜像称之为容器，镜像和容器的关系就好比类和实例的关系。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Nginx容器启动之后，访问localhost，熟悉的欢迎页面出现了吧，不用我们下载，编译，安装，直接实例化然后启动就好了，多么让人幸福的一件事。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/wmvzy&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;切回命终端，发现终端打印出了一堆log信息，我可不想整天盯着这些无趣的信息看，让Nginx进入守护运行吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 --name cool_nginx -d nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;是端口参数，给上&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数表示容器是守护程序会进入后台运行，&lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt;则是重新给容器命名。成功之后，用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;来查看当前已经启动的容器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/hsEm0&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在我们进入这个容器，并修改这个Nginx默认网页。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it cool_nginx bash
&amp;gt; echo '&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;' &amp;gt; /usr/share/nginx/html/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;挂载一个本地目录到容器，就不用每次都进入到容器中修改代码了，当然的将&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/bruce/Documents/Workspace/Docker/src/&lt;/code&gt;替换成你自己的文件目录。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 \
--name cool_nginx -d \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;php&quot;&gt;PHP&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker pull php:7.0-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用7.0版本的PHP，你可以选择其他版本的PHP。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -d \
--name cool_php_fpm \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
php:7.0-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;可以看到，Nginx和FPM都已经启动了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/3Z1Kc&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么PHP如何和Nginx链接起来呢？很简单，Docker为我们做好了一切，只需要一个参数就可以将两个容器链接起来。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--link cool_php_fpm 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们都知道，Nginx默认是不解析PHP文件的，所以还需要修改一下配置，不需要进入Nginx容器里去修改，我们在当前文件夹下，新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nginx.conf&lt;/code&gt;文件，写入如下内容：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    access_log off;
    error_log  /var/log/nginx/error.log error;

    sendfile off;

    client_max_body_size 100m;

    location ~ \.php?$ {
        fastcgi_pass cool_php_fpm:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /usr/share/nginx/html$fastcgi_script_name;
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
    }

    location ~ /\.ht {
        deny all;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm cool_nginx&lt;/code&gt;命令删除掉原先的Nginx容器，挂载该配置文件重新实例化：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -p 80:80 \
--name cool_nginx -d \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
-v /Users/bruce/Documents/Workspace/Docker/default_nginx.conf:/etc/nginx/conf.d/default.conf:ro \
--link cool_php_fpm \
nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在本地&lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt;目录下，新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;test.php&lt;/code&gt;文件，写入熟悉的内容：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
echo phpinfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Boom!!! PHP和Nginx就搭建好了，足够简单吧。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/k2XcB&quot; alt=&quot;phpinfo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;MySQL&lt;/h2&gt;
&lt;p&gt;和之前的安装一样，先拉取MySQL镜像：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker pull mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后启动：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -d \
--name cool_mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;参数是给给定环境变量，这里我们设定MySQL的密码是&lt;code class=&quot;highlighter-rouge&quot;&gt;123456&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;链接到MySQL容器：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it cool_mysql bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;登陆MySQL:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; mysql -uroot -p123456
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/d3Duk&quot; alt=&quot;MySQL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PHP如何链接到MySQL，相信你也知道了，对的还是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--link&lt;/code&gt;参数，我们删除掉&lt;code class=&quot;highlighter-rouge&quot;&gt;cool_php_fpm&lt;/code&gt;容器，重新构建&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker run -d \
--name cool_php_fpm \
-v /Users/bruce/Documents/Workspace/Docker/src/:/usr/share/nginx/html/ \
--link cool_mysql \
php:7.0-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;链接之后，PHP容器和MySQL容器能够通信了，但是还是不够呢(坚持一下，最后一步了)，初始PHP是没有安装MySQL扩展的，安装扩张也极其容易，先进入到PHP容器：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it cool_php bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-php-ext-install&lt;/code&gt;命令安装：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-php-ext-install mysqli
&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ok，我们重启PHP容器:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker restart cool_php_fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;来测试一下，新建一个测试脚本：&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cool_mysql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;123456&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create connection
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysqli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$servername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Check connection
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection failed: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Connected successfully&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/qsMdH&quot; alt=&quot;test mysql success&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;docker-compose&lt;/h2&gt;
&lt;p&gt;每次都用Dokcer命令实在是太过麻烦，引用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;这个工具更方便构建容器，配置容器等工作。&lt;/p&gt;

&lt;p&gt;好的，我们重新开始，使用下面两条命令让你忘掉一切：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker stop $(docker ps -a -q)
&amp;gt; docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们新建一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;的目录，用来存放&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;容器相关的配置文件，把前面我们使用的Nginx配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nginx.conf&lt;/code&gt;移动到这里，并新建名为&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfille&lt;/code&gt;的文件，写入如下内容：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM nginx

COPY ./default_nginx.conf /etc/nginx/conf.d/default.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在&lt;strong&gt;此文件夹&lt;/strong&gt;外新建&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;的文件，并写入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cool_nginx:
  build: ./nginx
  ports:
    - &quot;80:80&quot;
  volumes:
    # source
    - ./src/:/usr/share/nginx/htm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;想要重新构建Nginx容器就变得很简单：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;启动Nginx容器也非常容易：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或者干脆两者结合起来：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose up -d --build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;将配置写入文件，不仅不容易出错，而且更加容易分发，谁也不想在终端上输入那么一长串的命令。&lt;/p&gt;

&lt;p&gt;至于MySQL和PHP容器的构建，就不详细说明了，他们的构建都是一样的，全部的代码你可以在如下地址查阅：&lt;a href=&quot;https://github.com/blue7wings/lnmp_in_docker&quot;&gt;https://github.com/blue7wings/lnmp_in_docker&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;后续&quot;&gt;后续&lt;/h2&gt;
&lt;p&gt;毕竟此教程是一个新手向的教程，不准确表达在所难免，如果对某些问题还是比较疑惑，可以留言询问，除此之外，我最为推荐的还是先去查阅官方文档，或者是去stackoverflow上去看一看。以下两个资源非常适合新手入门，希望所有朋友都能以此为入门，掌握这门优秀的技术。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;Docker — 从入门到实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 03 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Docker.html</guid>
        
        <category>PHP</category>
        
        <category>开发环境</category>
        
        
        <category>PHP Tutorial</category>
        
      </item>
    
      <item>
        <title>更好的PHP开发环境-Vagrant篇</title>
        <description>&lt;p&gt;还记得，我们第一次学PHP是干嘛么？我想大部人都是从安装PHP运行环境开始的吧。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;学习PHP第一步，就要先理解PHP的运行环境 – 韩老师&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后就开始哼哧哼哧地开始在Windows上安装环境，先PHP，然后Apache，再装MySQL，从安装到最后调试通，足足花了一周。&lt;/p&gt;

&lt;p&gt;后来，我们也明白，Apache是干嘛的，流量是怎么交给PHP处理的，就别这么费劲一步一步装了，来一套集成的安装环境，&lt;a href=&quot;http://www.wampserver.com/en/&quot;&gt;WampServer&lt;/a&gt; 成了最好的选择。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/UE7k3&quot; alt=&quot;Wampserver 官网截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好学而且有好奇心的我们，成长的总是那么快，很快我们便知道有一种操作系统比Windows更适合开发，有一种服务器比Apache更优秀，便开始在Linux上安装LNMP架构的环境，大学实验室里那几台电脑，被我们装了又装，Linux发行版也换了好几茬，然后就毕业了，第一天上班就是要装开发环境，你得用QQ和PHPStorm，不能在那么优秀的操作系统上开发了，无奈换回了WampServer，冷气吹得你发冷和难受，你开始怀念那段大学不受拘束的时光，和实验室那几台LNMP架构的开发环境。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/K7nJ6&quot; alt=&quot;Vagrant&quot; /&gt;&lt;/p&gt;

&lt;p&gt;时光一去不复返，但我们即可以使用QQ和PHPStorm，同时也能使用我们心爱的LNMP环境开发了，就是我们今天的主角：&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;vagrant-是什么--可以做什么&quot;&gt;Vagrant 是什么 &amp;amp; 可以做什么&lt;/h2&gt;
&lt;p&gt;Vagrant是一套对虚拟系统进行配置，管理，分发的一套系统，依赖虚拟机环境，比如Virtualbox和VMWare。&lt;/p&gt;

&lt;p&gt;这和直接使用Virtualbox等虚拟机软件有什么不同呢？本质上是没有什么不同的，Vagrant只是一套工具，我们可以更加方便配置，和使用这个虚拟机，想想一条命令就能保存现运行的虚拟环境，远比你去拷贝虚拟机文件简单地多吧。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;下载页面&lt;/a&gt;，选择你的操作系统对应的版本，然后安装。&lt;/p&gt;

&lt;p&gt;安装完毕，尝试在终端中输入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant --version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;此外还需要安装Virtualbox或者VMWare，Virtualbox开源且免费，默认我选择此虚拟机，可以在 &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt; 选择合适的版本。&lt;/p&gt;
&lt;h2 id=&quot;选择合适的镜像&quot;&gt;选择合适的镜像&lt;/h2&gt;
&lt;p&gt;我们把镜像称之为box，添加一个镜像也很简单。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant box add centos/7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;很简单就添加了centos7的开发镜像，当然你还可以选择其他的镜像，在 &lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt; 选择适合你的。&lt;/p&gt;

&lt;p&gt;由于国内网络的原因，直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;命名，下载镜像的速度实在太慢(Fuck GFW)，我们不妨事先下载好镜像，然后再&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;进去，我们在 &lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt;选择和下载镜像。&lt;/p&gt;

&lt;p&gt;我们下载好镜像，放在目录下，执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant box add [名称] [镜像地址]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/udvKh&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们再运行&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant box list&lt;/code&gt;命令，便能看到一个名为server的镜像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/n5J5G&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;启动开发环境&quot;&gt;启动开发环境&lt;/h2&gt;
&lt;p&gt;首先要初始化此开发环境，在任意文件夹下执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant init [镜像名称]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/llgLq&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;初始化完成之后，会在当前文件夹下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;的配置文件，至于有哪些配置项，先放在一边，先启动我们的开发镜像，在&lt;strong&gt;此文件夹&lt;/strong&gt;下执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/6BHhy&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功启动，如果你打开Virtualbox，还可以发现vagrant镜像正在运行。
&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/39erQ&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过SSH来连接开发环境，如果你是Mac或Linux用户，可以直接用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt;来连接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/fp2La&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于Windows原生不支持SSH，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh-config&lt;/code&gt;来取得SSH配置，用第三方的SSH软件来连接。&lt;/p&gt;

&lt;p&gt;连接上我们的开发环境，执行命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; uname -a 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/ApRkM&quot; alt=&quot;Untitled Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wow，熟悉的Linux系统又回来了，我啰啰嗦嗦写了这么多，其实简单几步就创建好了一个开发环境，你现在便可以在本地用着QQ，而在开发环境装LNMP，进行开发工作了。&lt;/p&gt;

&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
&lt;p&gt;只是搭建好了开发环境，还是不够，还需要有共享文件夹，把本地网络和开发环境网络调通，以便我们后续的开发和调试。&lt;/p&gt;

&lt;h3 id=&quot;共享文件夹配置&quot;&gt;共享文件夹配置&lt;/h3&gt;
&lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;，在42至46行告诉我们，共享文件夹是在这里配置，第一个配置参数是本地目录，第二个参数是开发环境要同步的目录。在本地新建&lt;code class=&quot;highlighter-rouge&quot;&gt;code/&lt;/code&gt;文件夹，并且在开发环境新建文件夹&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/code&lt;/code&gt;，想要本地和开发环境共享文件，便可以这么写：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config.vm.synced_folder &quot;./code&quot;, &quot;/home/code&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;取消该行代码的注释，保存，&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant reload&lt;/code&gt; 命令重新启动虚拟机。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/BC4Dn&quot; alt=&quot;文件挂载成功&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挂载共享文件夹成功，在本地code文件夹新建一个文件试试吧，开发环境的code文件夹下也一定有该文件了，awesome！&lt;/p&gt;

&lt;h3 id=&quot;网络配置&quot;&gt;网络配置&lt;/h3&gt;
&lt;p&gt;本地和开发开发环境网络连接共有三种方式&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;端口转发：将指定端口的网络转接到开发环境&lt;/li&gt;
  &lt;li&gt;公开网络：将所有网络转接到开发环境，是一种桥接&lt;/li&gt;
  &lt;li&gt;私有网络：将指定IP的网络转接到开发环境&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我比较偏向于第三种私有网络的方式，修改配置文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;保存，&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant reload&lt;/code&gt;命令重启虚拟机。如果你已经装完Nginx，直接访问&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.33.10&lt;/code&gt;即可看到成功页面了。出现拒绝访问的话，关闭开发环境的防火墙即可。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl disable firewalld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ooyc2y4k2.bkt.clouddn.com/TRWMT&quot; alt=&quot;Nginx成功页面&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;备份和分发&quot;&gt;备份和分发&lt;/h2&gt;
&lt;p&gt;你安装完LNMP环境，甚至还装了Redis和Python，作为开发环境用得很是顺畅，旁边的小张也受够了WampServer这种不专业的东西，但他懒到都不愿意花半个小时读一下这篇文章，仅仅想要你的开发环境。&lt;/p&gt;

&lt;p&gt;大可不用去拷贝虚拟机文件，Vagrant为我们准备好了备份的工具。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;vagrant会将我们现在运行的开发环境打包成一个新的box，此镜像包含我们已经安装的所有的东西，再把Vagrantfile拷贝过去，两条命令就可以重现当前的开发环境，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vagrant box add server package.box
&amp;gt; vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;BOOM！你的开发环境完整的就移植过去了。此方法也可以用作你开发系统的备份，想要一份祖传的开发环境？打包一份传到网盘，随时随地任何机器都可以使用。&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Vagrant.html</link>
        <guid isPermaLink="true">http://localhost:4000/php%20tutorial/Better-Dev-Envirenment-Vagrant.html</guid>
        
        <category>PHP</category>
        
        <category>开发环境</category>
        
        
        <category>PHP Tutorial</category>
        
      </item>
    
  </channel>
</rss>
